{
  parserClass="org.intellij.yang.parser.YangParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Yang"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.yang.psi"
  psiImplPackage="org.intellij.yang.psi.impl"

  elementTypeHolderClass="org.intellij.yang.psi.YangTypes"
  elementTypePrefix="YANG_"
  elementTypeClass="org.intellij.yang.psi.YangElementType"
  tokenTypeClass="org.intellij.yang.psi.YangTokenType"

}

YangFile ::= module_stmt | submodule_stmt

string_stmt ::= STRING (PLUS STRING)*

comment_stmt ::= COMMENT

identifier_stmt ::= IDENTIFIER [string_stmt]

stmtend ::= (SEMICOLON) | (LEFT_BRACE [identifier_stmt] RIGHT_BRACE);

module_stmt ::= MODULE string_stmt LEFT_BRACE module_header_stmts linkage_stmts meta_stmts revision_stmts body_stmts RIGHT_BRACE

submodule_stmt ::=  SUBMODULE string_stmt LEFT_BRACE submodule_header_stmts linkage_stmts meta_stmts revision_stmts body_stmts RIGHT_BRACE

private module_header_stmts ::= [ yang_version_stmt ] namespace_stmt prefix_stmt

private  submodule_header_stmts ::= [ yang_version_stmt ] belongs_to_stmt

private meta_stmts ::=  [organization_stmt ] [contact_stmt ] [description_stmt ] [reference_stmt]

private  linkage_stmts ::= (import_stmt)+ (include_stmt)+

private revision_stmts ::= (revision_stmt)+

private body_stmts ::= (extension_stmt | feature_stmt | identity_stmt | typedef_stmt | grouping_stmt | data_def_stmt | augment_stmt | rpc_stmt | notification_stmt | deviation_stmt)+

private data_def_stmt ::= container_stmt | leaf_stmt | leaf_list_stmt | list_stmt  | choice_stmt | anyxml_stmt | uses_stmt

yang_version_stmt ::= YANG_VERSION string_stmt stmtend

import_stmt ::= IMPORT string_stmt LEFT_BRACE  prefix_stmt [revision_date_stmt] RIGHT_BRACE

include_stmt ::= INCLUDE string_stmt (SEMICOLON | LEFT_BRACE [revision_date_stmt] RIGHT_BRACE)

namespace_stmt ::= NAMESPACE string_stmt stmtend

prefix_stmt ::= PREFIX string_stmt stmtend

belongs_to_stmt ::= BELONGS_TO string_stmt LEFT_BRACE prefix_stmt RIGHT_BRACE

organization_stmt ::= ORGANIZATION string_stmt stmtend

contact_stmt ::= CONTACT string_stmt stmtend

description_stmt ::= DESCRIPTION string_stmt stmtend

reference_stmt ::= REFERENCE  string_stmt stmtend

units_stmt ::= UNITS string_stmt stmtend

revision_stmt ::= REVISION string_stmt (SEMICOLON | LEFT_BRACE [description_stmt] [reference_stmt] RIGHT_BRACE)

revision_date_stmt ::= REVISION_DATE string_stmt stmtend

extension_stmt ::= EXTENSION string_stmt ( SEMICOLON | LEFT_BRACE [argument_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE )

argument_stmt ::= ARGUMENT string_stmt ( SEMICOLON | LEFT_BRACE [yin_element_arg] RIGHT_BRACE )

private yin_element_arg ::= string_stmt //True or False

yin_element_stmt ::= YIN_ELEMENT yin_element_arg stmtend

identity_stmt  ::= IDENTITY string_stmt ( SEMICOLON | LEFT_BRACE [base_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE )

base_stmt ::= BASE string_stmt stmtend

feature_stmt ::= FEATURE string_stmt (SEMICOLON | LEFT_BRACE (if_feature_stmt+) [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

if_feature_stmt ::= IF_FEATURE string_stmt stmtend

typedef_stmt ::= TYPEDEF string_stmt LEFT_BRACE type_stmt [units_stmt] [default_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE

type_stmt ::= TYPE string_stmt ( SEMICOLON | RIGHT_BRACE type_body_stmts RIGHT_BRACE )

private type_body_stmts ::= numerical_restrictions | decimal64_specification | string_restrictions | enum_specification | leafref_specification | identityref_specification | instance_identifier_specification | bits_specification | union_specification | binary_specification

private binary_specification ::= [length_stmt]

private numerical_restrictions ::= range_stmt

range_stmt ::= RANGE string_stmt (SEMICOLON | LEFT_BRACE [error_message_stmt] [error_app_tag_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

private decimal64_specification  ::= fraction_digits_stmt [range_stmt]

fraction_digits_stmt  ::= FRACTION_DIGITS string_stmt stmtend

private string_restrictions  ::= [length_stmt] (pattern_stmt)+

length_stmt ::= LENGTH string_stmt (SEMICOLON | LEFT_BRACE [error_message_stmt] [error_app_tag_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

pattern_stmt ::= PATTERN string_stmt (SEMICOLON | LEFT_BRACE [error_message_stmt] [error_app_tag_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

default_stmt ::= DEFAULT string_stmt stmtend

private enum_specification ::= (enum_stmt)+

enum_stmt ::= ENUM string_stmt (SEMICOLON | LEFT_BRACE [value_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

private leafref_specification  ::= path_stmt

path_stmt ::= PATH string_stmt stmtend

require_instance_stmt ::= REQUIRE_INSTANCE string_stmt stmtend

private instance_identifier_specification ::= [require_instance_stmt]

private identityref_specification ::= base_stmt

private union_specification ::= (type_stmt)*

private bits_specification ::= (bit_stmt)*

bit_stmt ::= BIT string_stmt (SEMICOLON | LEFT_BRACE [position_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

position_stmt ::= POSITION string_stmt stmtend

status_stmt ::= STATUS string_stmt stmtend

config_stmt ::= CONFIG string_stmt stmtend

mandatory_stmt ::= MANDATORY string_stmt stmtend

presence_stmt ::= PRESENCE string_stmt stmtend

ordered_by_stmt ::= ORDERED_BY string_stmt stmtend

must_stmt ::= MUST string_stmt (SEMICOLON | LEFT_BRACE [error_message_stmt] [error_app_tag_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

error_message_stmt ::= ERROR_MESSAGE string_stmt stmtend

error_app_tag_stmt ::= ERROR_APP_TAG string_stmt stmtend

min_elements_stmt ::= MIN_ELEMENTS string_stmt stmtend

max_elements_stmt ::= MAX_ELEMENTS string_stmt stmtend

value_stmt ::= VALUE string_stmt stmtend

grouping_stmt ::= GROUPING string_stmt (SEMICOLON | LEFT_BRACE [status_stmt] [description_stmt] [reference_stmt] (typedef_stmt | grouping_stmt)+ (data_def_stmt)+ RIGHT_BRACE)

container_stmt ::= CONTAINER string_stmt (SEMICOLON | LEFT_BRACE [when_stmt] (if_feature_stmt)+ (must_stmt)+ [presence_stmt] [config_stmt] [status_stmt] [description_stmt] [reference_stmt] (typedef_stmt | grouping_stmt)+ (data_def_stmt)+ RIGHT_BRACE)

leaf_stmt ::= LEAF string_stmt LEFT_BRACE [when_stmt] (if_feature_stmt)+ type_stmt [units_stmt] (must_stmt)+ [default_stmt] [config_stmt] [mandatory_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE

leaf_list_stmt ::= LEAF_LIST string_stmt LEFT_BRACE [when_stmt] (if_feature_stmt)+ type_stmt [units_stmt] (must_stmt)+ [config_stmt] [min_elements_stmt] [max_elements_stmt] [ordered_by_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE

list_stmt ::= LIST string_stmt LEFT_BRACE [when_stmt] (if_feature_stmt)+ type_stmt [units_stmt] (must_stmt)+ [config_stmt] [min_elements_stmt] [max_elements_stmt] [ordered_by_stmt] [status_stmt] [description_stmt] [reference_stmt] (typedef_stmt | grouping_stmt)+ (data_def_stmt)* RIGHT_BRACE

key_stmt ::= KEY string_stmt stmtend

unique_stmt ::= UNIQUE string_stmt stmtend

choice_stmt ::= CHOICE string_stmt (SEMICOLON | LEFT_BRACE [when_stmt] (if_feature_stmt)+ [default_stmt] [config_stmt] [mandatory_stmt] [status_stmt] [description_stmt] [reference_stmt] (short_case_stmt | case_stmt)+ RIGHT_BRACE)

private short_case_stmt ::= container_stmt | leaf_stmt | leaf_list_stmt | list_stmt | anyxml_stmt

case_stmt ::= CASE string_stmt (SEMICOLON | LEFT_BRACE [when_stmt] (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] (data_def_stmt)+ RIGHT_BRACE)

anyxml_stmt ::= ANYXML string_stmt (SEMICOLON | LEFT_BRACE [when_stmt] (if_feature_stmt)+ (must_stmt)+ [config_stmt] [mandatory_stmt] [status_stmt] [description_stmt] [reference_stmt] RIGHT_BRACE)

uses_stmt ::= USES string_stmt (SEMICOLON | LEFT_BRACE [when_stmt] (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] (refine_stmt)+ (uses_augment_stmt)+ RIGHT_BRACE)

refine_stmt ::= REFINE string_stmt (SEMICOLON | LEFT_BRACE (refine_container_stmts | refine_leaf_stmts | refine_leaf_list_stmts | refine_list_stmts | refine_choice_stmts | refine_case_stmts | refine_anyxml_stmts) RIGHT_BRACE)

private refine_container_stmts ::= (must_stmt)+ [presence_stmt] [config_stmt] [description_stmt] [reference_stmt]

private refine_leaf_stmts ::= (must_stmt)+ [default_stmt] [config_stmt] [mandatory_stmt] [description_stmt] [reference_stmt]

private refine_leaf_list_stmts ::= (must_stmt)+ [config_stmt] [min_elements_stmt] [max_elements_stmt] [description_stmt] [reference_stmt]

private refine_list_stmts ::= (must_stmt)+ [config_stmt] [min_elements_stmt] [max_elements_stmt] [description_stmt] [reference_stmt]

private refine_choice_stmts ::= [default_stmt] [config_stmt] [mandatory_stmt] [description_stmt] [reference_stmt]

private refine_case_stmts ::= [description_stmt] [reference_stmt]

private refine_anyxml_stmts  ::= (must_stmt)+ [config_stmt] [mandatory_stmt] [description_stmt] [reference_stmt]

uses_augment_stmt ::= AUGMENT string_stmt LEFT_BRACE [when_stmt] (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] ((data_def_stmt)+ | (case_stmt))* RIGHT_BRACE

augment_stmt ::= AUGMENT string_stmt LEFT_BRACE [when_stmt] (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] ((data_def_stmt)+ | (case_stmt))* RIGHT_BRACE

when_stmt ::= WHEN string_stmt (SEMICOLON | LEFT_BRACE [description_stmt] [reference_stmt] RIGHT_BRACE)

rpc_stmt ::= RPC string_stmt (SEMICOLON | LEFT_BRACE (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] (typedef_stmt | grouping_stmt)+ [input_stmt] [output_stmt] RIGHT_BRACE)

input_stmt ::= INPUT LEFT_BRACE (typedef_stmt | grouping_stmt)+ (data_def_stmt)* RIGHT_BRACE

output_stmt ::= OUTPUT LEFT_BRACE (typedef_stmt | grouping_stmt)+ (data_def_stmt)* RIGHT_BRACE

notification_stmt ::= NOTIFICATION string_stmt (SEMICOLON | LEFT_BRACE (if_feature_stmt)+ [status_stmt] [description_stmt] [reference_stmt] (typedef_stmt | grouping_stmt)+ (data_def_stmt)+ RIGHT_BRACE)

deviation_stmt ::= DEVIATION string_stmt LEFT_BRACE [description_stmt] [reference_stmt] (deviate_not_supported_stmt | (deviate_add_stmt | deviate_replace_stmt | deviate_delete_stmt))+ RIGHT_BRACE

deviate_not_supported_stmt ::= DEVIATE NOT_SUPPORTED (SEMICOLON | LEFT_BRACE RIGHT_BRACE)

deviate_add_stmt ::= DEVIATE ADD (SEMICOLON | LEFT_BRACE [units_stmt] (must_stmt)+ (unique_stmt)+ [default_stmt] [config_stmt] [mandatory_stmt] [min_elements_stmt] [max_elements_stmt] RIGHT_BRACE)

deviate_delete_stmt ::= DEVIATE DELETE (SEMICOLON | LEFT_BRACE [units_stmt] (must_stmt)+ (unique_stmt)+ [default_stmt] RIGHT_BRACE)

deviate_replace_stmt ::= DEVIATE REPLACE (SEMICOLON | LEFT_BRACE [type_stmt] [units_stmt] [default_stmt] [config_stmt] [mandatory_stmt] [min_elements_stmt] [max_elements_stmt] RIGHT_BRACE)
