/* The following code was generated by JFlex 1.4.3 on 5/24/14 10:38 PM */

package uk.co.dtucker.yang.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static uk.co.dtucker.yang.psi.YangTypes.*;
import static uk.co.dtucker.yang.psi.YangTokenTypeSets.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/24/14 10:38 PM from the specification file
 * <tt>/Users/dave/dev/yang/src/uk/co/dtucker/yang/lexer/_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\16\1\0\1\10"+
    "\4\0\1\12\2\0\1\21\1\53\1\0\1\37\1\6\1\4\12\14"+
    "\1\5\1\17\5\0\6\14\24\6\1\0\1\7\2\0\1\45\1\0"+
    "\1\23\1\34\1\41\1\43\1\33\1\15\1\32\1\42\1\40\1\6"+
    "\1\47\1\30\1\27\1\24\1\36\1\44\1\51\1\31\1\35\1\11"+
    "\1\13\1\46\1\52\1\26\1\25\1\50\1\20\1\0\1\22\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\3\3\1\4\1\5"+
    "\1\6\22\3\1\7\6\0\64\3\2\10\13\0\13\3"+
    "\1\11\6\3\1\12\1\3\1\13\10\3\1\14\6\3"+
    "\1\15\31\3\1\16\1\3\1\0\1\10\1\17\11\0"+
    "\1\20\1\21\3\3\1\22\1\23\13\3\1\24\4\3"+
    "\1\25\1\3\1\26\7\3\1\27\2\3\1\30\16\3"+
    "\1\31\11\3\1\32\4\3\1\33\3\0\1\17\1\0"+
    "\2\17\3\0\1\17\2\3\1\34\1\3\1\35\20\3"+
    "\1\36\22\3\1\37\17\3\1\40\5\0\2\3\1\41"+
    "\3\3\1\42\10\3\1\43\2\3\1\44\1\3\1\45"+
    "\7\3\1\46\1\3\1\47\1\50\5\3\1\51\4\3"+
    "\1\52\1\53\1\3\1\54\4\3\1\55\2\3\4\0"+
    "\1\56\2\3\1\57\1\60\13\3\1\61\14\3\1\62"+
    "\1\3\1\63\1\3\1\64\1\65\2\3\1\66\1\3"+
    "\1\67\2\3\4\0\2\3\1\70\12\3\1\71\1\3"+
    "\1\72\7\3\1\73\1\3\1\74\4\3\1\75\1\76"+
    "\4\0\1\77\1\3\1\100\4\3\1\101\2\3\1\102"+
    "\1\103\2\3\1\104\3\3\1\105\3\3\1\106\2\3"+
    "\1\107\2\0\13\3\1\110\1\3\1\111\1\112\1\3"+
    "\1\113\2\0\4\3\1\114\7\3\1\115\1\3\1\116"+
    "\1\3\1\117\1\120\1\121\4\3\1\122\1\3\1\123"+
    "\1\124\1\3\1\125\1\126\2\3\1\127\1\3\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\54\0\54\0\54\0\u018c\0\u01b8\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\54\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\54\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78"+
    "\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8"+
    "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238"+
    "\0\u1264\0\260\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c"+
    "\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc"+
    "\0\u14f8\0\u1524\0\u1550\0\260\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\u162c\0\u1658\0\260\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4"+
    "\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\260\0\u1ad0\0\u1afc\0\u0ec8"+
    "\0\54\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30"+
    "\0\u1c5c\0\u1c88\0\u1cb4\0\260\0\u1ce0\0\u1d0c\0\u1d38\0\260"+
    "\0\260\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c"+
    "\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\260\0\u1f48\0\u1f74\0\u1fa0"+
    "\0\u1fcc\0\u1ff8\0\u2024\0\260\0\u2050\0\u207c\0\u20a8\0\u20d4"+
    "\0\u2100\0\u212c\0\u2158\0\260\0\u2184\0\u21b0\0\260\0\u21dc"+
    "\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c"+
    "\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\260\0\u2444\0\u2470"+
    "\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4\0\260"+
    "\0\u25d0\0\u25fc\0\u2628\0\u2654\0\260\0\u2680\0\u26ac\0\u26d8"+
    "\0\u1b28\0\u2704\0\u0f4c\0\u1c30\0\u2730\0\u275c\0\u2788\0\u0580"+
    "\0\u27b4\0\u27e0\0\260\0\u280c\0\260\0\u2838\0\u2864\0\u2890"+
    "\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0"+
    "\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\260\0\u2af8\0\u2b24"+
    "\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84"+
    "\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u2de4"+
    "\0\260\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18"+
    "\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078"+
    "\0\260\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac"+
    "\0\260\0\u31d8\0\u3204\0\u3230\0\260\0\u325c\0\u3288\0\u32b4"+
    "\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390\0\260\0\u33bc\0\u33e8"+
    "\0\260\0\u3414\0\260\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0"+
    "\0\u351c\0\u3548\0\260\0\u3574\0\260\0\260\0\u35a0\0\u35cc"+
    "\0\u35f8\0\u3624\0\u3650\0\260\0\u367c\0\u36a8\0\u36d4\0\u3700"+
    "\0\260\0\260\0\u372c\0\260\0\u3758\0\u3784\0\u37b0\0\u37dc"+
    "\0\260\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4\0\260"+
    "\0\u3910\0\u393c\0\260\0\260\0\u3968\0\u3994\0\u39c0\0\u39ec"+
    "\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\260"+
    "\0\u3b4c\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80"+
    "\0\u3cac\0\u3cd8\0\u3d04\0\u3d30\0\260\0\u3d5c\0\260\0\u3d88"+
    "\0\260\0\260\0\u3db4\0\u3de0\0\260\0\u3e0c\0\260\0\u3e38"+
    "\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c\0\260"+
    "\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc"+
    "\0\u40f8\0\u4124\0\u4150\0\u417c\0\260\0\u41a8\0\u41d4\0\u4200"+
    "\0\u422c\0\u4258\0\u4284\0\u42b0\0\260\0\u42dc\0\260\0\u4308"+
    "\0\u4334\0\u4360\0\u438c\0\260\0\260\0\u43b8\0\u43e4\0\u4410"+
    "\0\u443c\0\260\0\u4468\0\260\0\u4494\0\u44c0\0\u44ec\0\u4518"+
    "\0\260\0\u4544\0\u4570\0\260\0\260\0\u459c\0\u45c8\0\260"+
    "\0\u45f4\0\u4620\0\u464c\0\260\0\u4678\0\u46a4\0\u46d0\0\260"+
    "\0\u46fc\0\u4728\0\260\0\u4754\0\u4780\0\u47ac\0\u47d8\0\u4804"+
    "\0\u4830\0\u485c\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964"+
    "\0\260\0\u4990\0\260\0\260\0\u49bc\0\260\0\u49e8\0\u4a14"+
    "\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4\0\260\0\u4af0\0\u4b1c\0\u4b48"+
    "\0\u4b74\0\u4ba0\0\u4bcc\0\u4bf8\0\260\0\u4c24\0\260\0\u4c50"+
    "\0\260\0\260\0\260\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\260"+
    "\0\u4d2c\0\260\0\260\0\u4d58\0\260\0\260\0\u4d84\0\u4db0"+
    "\0\260\0\u4ddc\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\6\1\10\1\5\1\11\1\3\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\5\1\30\1\31"+
    "\1\5\1\32\1\33\1\5\1\34\1\35\2\5\1\36"+
    "\1\37\55\0\3\3\12\0\1\3\41\0\1\40\2\5"+
    "\2\0\1\5\1\0\3\5\3\0\1\41\1\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\30\5"+
    "\1\0\1\42\2\43\5\42\1\44\1\42\1\45\3\42"+
    "\3\43\33\42\5\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\2\5\1\46\3\5\1\47\21\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\50\10\5"+
    "\1\51\15\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\52\5\5\1\53\1\5\1\54\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\1\55\2\5\5\0\1\5"+
    "\1\56\4\5\1\57\11\5\1\60\7\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\61\12\5\1\62"+
    "\14\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\63\14\5\1\64\12\5\6\0\2\5\2\0\1\5"+
    "\1\0\1\65\2\5\5\0\1\66\12\5\1\67\1\5"+
    "\1\70\12\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\71\4\5\1\72\12\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\73\7\5\1\74"+
    "\10\5\1\75\6\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\6\5\1\76\21\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\77\1\5\1\100"+
    "\2\5\1\101\21\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\102\7\5\1\103\4\5\1\104\12\5"+
    "\6\0\2\5\2\0\1\105\1\0\1\106\2\5\5\0"+
    "\2\5\1\107\25\5\6\0\2\5\2\0\1\5\1\0"+
    "\1\110\2\5\5\0\6\5\1\111\2\5\1\112\16\5"+
    "\6\0\2\5\2\0\1\5\1\0\2\5\1\113\5\0"+
    "\1\5\1\114\2\5\1\115\13\5\1\116\7\5\6\0"+
    "\2\5\2\0\1\5\1\0\1\117\2\5\5\0\1\120"+
    "\12\5\1\121\3\5\1\122\10\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\123\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\124\5\5"+
    "\1\125\4\5\1\126\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\127\27\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\130\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\17\5\1\131"+
    "\10\5\1\0\1\40\1\132\1\133\51\40\21\134\1\135"+
    "\32\134\1\42\2\43\13\42\3\43\33\42\1\0\2\43"+
    "\5\0\1\136\5\0\3\43\33\0\1\137\2\140\4\137"+
    "\1\141\1\142\5\137\3\140\33\137\1\143\2\144\4\143"+
    "\1\145\2\143\1\146\3\143\3\144\33\143\5\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\21\5\1\147\6\5"+
    "\6\0\2\5\2\0\1\5\1\0\1\150\2\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\11\5\1\151\3\5\1\152\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\153\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\5\5\1\154"+
    "\22\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\155\27\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\156\27\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\7\5\1\157\20\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\2\5\1\160\25\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\7\5\1\161"+
    "\20\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\20\5\1\162\7\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\4\5\1\163\23\5\6\0\2\5\2\0"+
    "\1\164\1\0\3\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\165\26\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\5\1\166"+
    "\26\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\12\5\1\167\15\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\5\1\170\1\5\1\171\24\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\20\5\1\172"+
    "\7\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\173\26\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\174\1\175\26\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\12\5\1\176\15\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\5\1\177"+
    "\26\5\6\0\2\5\2\0\1\5\1\0\2\5\1\200"+
    "\5\0\21\5\1\201\1\5\1\202\2\5\1\203\1\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\16\5"+
    "\1\204\11\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\13\5\1\205\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\1\206\2\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\207\1\0\3\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\6\5\1\210\21\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\12\5\1\211"+
    "\15\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\5\5\1\212\22\5\6\0\2\5\2\0\1\213\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\214\27\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\11\5\1\215\16\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\12\5\1\216\15\5"+
    "\6\0\2\5\2\0\1\217\1\0\3\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\7\5"+
    "\1\220\10\5\1\221\7\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\12\5\1\222\15\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\14\5\1\223\13\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\16\5"+
    "\1\224\2\5\1\225\6\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\21\5\1\226\6\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\10\5\1\227\17\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\230\21\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\12\5\1\231\15\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\5\1\232\26\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\13\5\1\233\14\5"+
    "\6\0\2\5\2\0\1\5\1\0\2\5\1\234\5\0"+
    "\5\5\1\235\4\5\1\236\6\5\1\237\1\5\1\240"+
    "\4\5\6\0\2\5\2\0\1\241\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\242\17\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\12\5\1\243\15\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\5\5\1\244\22\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\2\5\1\245"+
    "\25\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\246\17\5\3\0\1\133\51\0\21\134\1\247"+
    "\36\134\1\250\14\134\1\247\32\134\12\0\1\251\41\0"+
    "\1\137\2\140\5\137\1\44\5\137\3\140\33\137\1\252"+
    "\2\140\5\252\1\253\5\252\3\140\33\252\1\137\2\140"+
    "\1\137\1\44\2\137\3\44\1\254\2\137\1\44\3\140"+
    "\3\137\1\44\4\137\1\44\2\137\1\44\20\137\2\140"+
    "\4\137\1\141\1\255\5\137\3\140\33\137\1\143\2\144"+
    "\7\143\1\45\3\143\3\144\33\143\1\256\2\144\5\256"+
    "\1\257\1\256\1\260\3\256\3\144\33\256\1\143\2\144"+
    "\1\143\1\45\2\143\3\45\1\261\2\143\1\45\3\144"+
    "\3\143\1\45\4\143\1\45\2\143\1\45\20\143\2\144"+
    "\4\143\1\145\1\262\1\143\1\146\3\143\3\144\33\143"+
    "\5\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\263\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\264\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\13\5\1\265\14\5\6\0\2\5"+
    "\2\0\1\266\1\0\3\5\5\0\26\5\1\267\1\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\270\3\5\1\271\15\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\12\5\1\272\15\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\16\5\1\273\11\5"+
    "\6\0\2\5\2\0\1\274\1\0\3\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\4\5"+
    "\1\275\23\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\3\5\1\276\24\5\6\0\2\5\2\0\1\5"+
    "\1\0\1\277\2\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\300\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\15\5\1\301"+
    "\4\5\1\302\5\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\7\5\1\303\20\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\14\5\1\304\13\5\6\0"+
    "\2\5\2\0\1\305\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\20\5\1\306"+
    "\7\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\14\5\1\307\13\5\6\0\2\5\2\0\1\5\1\0"+
    "\1\310\2\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\14\5\1\311\13\5\6\0\2\5"+
    "\2\0\1\5\1\0\2\5\1\312\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\7\5\1\313"+
    "\20\5\6\0\2\5\2\0\1\314\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\7\5\1\315\20\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\316\4\5\1\317\12\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\5\5\1\320"+
    "\22\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\15\5\1\321\12\5\6\0\2\5\2\0\1\5\1\0"+
    "\1\322\2\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\1\323\2\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\4\5\1\324\23\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\325"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\13\5\1\326\14\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\327\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\13\5\1\330\14\5\6\0"+
    "\2\5\2\0\1\331\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\4\5\1\332"+
    "\23\5\6\0\2\5\2\0\1\333\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\21\5\1\334\6\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\335\27\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\336\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\13\5\1\337\14\5"+
    "\6\0\2\5\2\0\1\5\1\0\2\5\1\340\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\5\5\1\341\22\5\6\0\2\5\2\0\1\5\1\0"+
    "\1\342\2\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\13\5\1\343\14\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\344\26\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\345\21\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\346\17\5\6\0\2\5\2\0\1\347"+
    "\1\0\2\5\1\350\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\15\5\1\351\12\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\352\27\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\353\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\16\5\1\354\11\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\6\5\1\355\21\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\15\5\1\356\12\5"+
    "\6\0\2\5\2\0\1\357\1\0\3\5\5\0\17\5"+
    "\1\360\10\5\6\0\2\5\2\0\1\5\1\0\2\5"+
    "\1\361\5\0\12\5\1\362\15\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\15\5\1\363\12\5\6\0"+
    "\2\5\2\0\1\5\1\0\1\364\2\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\365\26\5\1\0\4\134\1\133\14\134\1\247\32\134"+
    "\10\252\1\366\52\252\1\367\1\370\1\252\1\371\41\252"+
    "\1\137\2\140\5\137\1\44\2\137\1\372\2\137\3\140"+
    "\34\137\2\140\4\137\1\141\1\255\1\137\1\373\3\137"+
    "\3\140\33\137\12\256\1\260\53\256\1\374\50\256\1\375"+
    "\2\256\1\376\41\256\1\143\2\144\4\143\1\145\2\143"+
    "\1\146\1\377\2\143\3\144\34\143\2\144\7\143\1\u0100"+
    "\3\143\3\144\33\143\5\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\20\5\1\u0101\7\5\6\0\2\5\2\0"+
    "\1\5\1\0\1\u0102\2\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\12\5\1\u0103\15\5"+
    "\6\0\2\5\2\0\1\5\1\0\1\u0104\2\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u0105\17\5\6\0\2\5\2\0\1\u0106\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\1\u0107\2\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u0108\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\4\5\1\u0109\23\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\4\5"+
    "\1\u010a\23\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\12\5\1\u010b\15\5\6\0\2\5\2\0\1\5"+
    "\1\0\2\5\1\u010c\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\12\5\1\u010d\15\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\14\5\1\u010e"+
    "\13\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u010f\17\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\u0110\27\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u0111\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\5\5\1\u0112\22\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u0113\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\14\5\1\u0114\13\5\6\0\2\5\2\0\1\u0115"+
    "\1\0\3\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u0116\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\6\5\1\u0117\21\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\u0118\26\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\u0119\27\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\12\5\1\u011a\15\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\15\5\1\u011b\12\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\21\5\1\u011c"+
    "\6\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\u011d\26\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\6\5\1\u011e\21\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\u011f\26\5\6\0"+
    "\2\5\2\0\1\5\1\0\1\u0120\2\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\13\5"+
    "\1\u0121\14\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u0122\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\1\u0123\2\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\u0124\26\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\6\5\1\u0125"+
    "\21\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\5\5\1\u0126\22\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u0127\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\1\u0128\2\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\u0129\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\6\5\1\u012a\21\5"+
    "\6\0\2\5\2\0\1\u012b\1\0\3\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u012c\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\u012d\27\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u012e\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\16\5\1\u012f\11\5\6\0"+
    "\2\5\2\0\1\5\1\0\1\u0130\2\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\u0131\1\0\3\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\u0132\21\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u0133\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\u0134\27\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u0135\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\15\5\1\u0136"+
    "\12\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u0137\17\5\6\0\2\5\2\0\1\u0138\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u0139\17\5\1\0\7\252\1\367"+
    "\1\370\47\252\1\366\2\252\3\366\1\u013a\2\252\1\366"+
    "\6\252\1\366\4\252\1\366\2\252\1\366\26\252\1\367"+
    "\1\u013b\43\252\1\137\2\140\5\137\1\44\1\137\1\u013c"+
    "\3\137\3\140\33\137\4\256\1\260\2\256\3\260\1\u013d"+
    "\2\256\1\260\6\256\1\260\4\256\1\260\2\256\1\260"+
    "\26\256\1\375\1\257\1\256\1\376\41\256\1\143\2\144"+
    "\7\143\1\u013e\3\143\3\144\33\143\5\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u013f\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\5\1\u0140"+
    "\26\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u0141\17\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u0142\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\6\5\1\u0143\21\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\5\1\u0144"+
    "\26\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\5\5\1\u0145\22\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u0146\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\21\5\1\u0147\6\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\15\5\1\u0148"+
    "\12\5\6\0\2\5\2\0\1\5\1\0\1\u0149\2\5"+
    "\5\0\30\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\23\5\1\u014a\4\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\5\5\1\u014b\22\5\6\0\2\5"+
    "\2\0\1\u014c\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\5\5\1\u014d\22\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u014e\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\5\5\1\u014f\22\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\5\5\1\u0150\22\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\17\5\1\u0151\10\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u0152\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u0153\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\16\5\1\u0154\11\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\15\5\1\u0155\12\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\u0156\21\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\15\5\1\u0157\12\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\12\5\1\u0158\15\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\14\5\1\u0159\13\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\7\5"+
    "\1\u015a\20\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\12\5\1\u015b\15\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\20\5\1\u015c\7\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\4\5\1\u015d\23\5"+
    "\6\0\2\5\2\0\1\u015e\1\0\3\5\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\15\5"+
    "\1\u015f\12\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u0160\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u0161\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\u0162\27\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\20\5\1\u0163"+
    "\7\5\6\0\2\5\2\0\1\u0164\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\15\5\1\u0165\12\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\5\1\u0166\26\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\15\5\1\u0167\1\u0168\11\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\7\5"+
    "\1\u0169\20\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u016a\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\5\5\1\u016b\22\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\10\5\1\u016c\17\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\15\5"+
    "\1\u016d\12\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\16\5\1\u016e\11\5\6\0\2\5\2\0\1\u016f"+
    "\1\0\3\5\5\0\30\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\6\5\1\u0170\21\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\3\5\1\u0171\24\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\u0172\26\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\15\5\1\u0173\12\5\1\0\10\252\1\366\2\252"+
    "\1\u0174\47\252\1\367\1\u013b\1\252\1\371\41\252\1\137"+
    "\2\140\5\137\1\44\3\137\2\u0175\3\140\2\137\1\u0175"+
    "\7\137\2\u0175\4\137\1\u0175\1\137\1\u0175\10\137\7\256"+
    "\1\375\2\256\1\376\1\u0176\40\256\1\143\2\144\4\143"+
    "\1\145\2\143\1\146\1\143\2\u0177\3\144\2\143\1\u0177"+
    "\7\143\2\u0177\4\143\1\u0177\1\143\1\u0177\10\143\5\0"+
    "\2\5\2\0\1\5\1\0\2\5\1\u0178\5\0\30\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\20\5"+
    "\1\u0179\7\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\13\5\1\u017a\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u017b\17\5\6\0\2\5"+
    "\2\0\1\u017c\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\u017d\26\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\u017e"+
    "\27\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\16\5\1\u017f\11\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\21\5\1\u0180\6\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u0181\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u0182"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\13\5\1\u0183\14\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u0184\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u0185\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\15\5\1\u0186"+
    "\12\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\u0187\26\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u0188\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\13\5\1\u0189\14\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u018a"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\u018b\26\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u018c\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\u018d\3\5\1\u018e\23\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\12\5"+
    "\1\u018f\15\5\6\0\2\5\2\0\1\5\1\0\1\u0190"+
    "\2\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\25\5\1\u0191\2\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\20\5\1\u0192\7\5\6\0"+
    "\2\5\2\0\1\u0193\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\u0194\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u0195"+
    "\17\5\6\0\2\5\2\0\1\u0196\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\u0197\1\0\3\5\5\0"+
    "\30\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\u0198\26\5\6\0\2\5\2\0\1\u0199\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\u019a\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\21\5\1\u019b\6\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\u019c\27\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\10\5\1\u019d\4\5"+
    "\1\u019e\12\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\5\1\u019f\26\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\16\5\1\u01a0\11\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\13\5\1\u01a1\14\5"+
    "\1\0\10\252\1\366\1\252\1\u01a2\41\252\1\137\2\140"+
    "\5\137\1\44\3\137\2\u01a3\3\140\2\137\1\u01a3\7\137"+
    "\2\u01a3\4\137\1\u01a3\1\137\1\u01a3\10\137\12\256\1\u01a4"+
    "\41\256\1\143\2\144\7\143\1\45\1\143\2\u01a5\3\144"+
    "\2\143\1\u01a5\7\143\2\u01a5\4\143\1\u01a5\1\143\1\u01a5"+
    "\10\143\5\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u01a6\17\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\1\5\1\u01a7\26\5\6\0\2\5\2\0"+
    "\1\u01a8\1\0\3\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\16\5\1\u01a9\11\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\u01aa\27\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\21\5"+
    "\1\u01ab\6\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\6\5\1\u01ac\21\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\4\5\1\u01ad\23\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\6\5\1\u01ae\21\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\4\5"+
    "\1\u01af\23\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\4\5\1\u01b0\23\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\12\5\1\u01b1\15\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\16\5\1\u01b2\11\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\u01b3\26\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\14\5\1\u01b4\13\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\7\5\1\u01b5\20\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\13\5\1\u01b6\14\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\21\5"+
    "\1\u01b7\6\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\10\5\1\u01b8\17\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\14\5\1\u01b9\13\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\5\5\1\u01ba\22\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\u01bb"+
    "\27\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\14\5\1\u01bc\13\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u01bd\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\1\u01be\2\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\2\5\1\u01bf\25\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u01c0\17\5\6\0\2\5\2\0\1\u01c1\1\0\3\5"+
    "\5\0\30\5\6\0\2\5\2\0\1\u01c2\1\0\3\5"+
    "\5\0\30\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\13\5\1\u01c3\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u01c4\17\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\u01c5\26\5"+
    "\1\0\10\252\1\366\3\252\2\u01c6\5\252\1\u01c6\7\252"+
    "\2\u01c6\4\252\1\u01c6\1\252\1\u01c6\10\252\1\137\2\140"+
    "\5\137\1\44\3\137\2\u01c7\3\140\2\137\1\u01c7\7\137"+
    "\2\u01c7\4\137\1\u01c7\1\137\1\u01c7\10\137\7\256\1\375"+
    "\2\256\1\376\1\256\2\u01c8\5\256\1\u01c8\7\256\2\u01c8"+
    "\4\256\1\u01c8\1\256\1\u01c8\10\256\1\143\2\144\7\143"+
    "\1\45\1\143\2\u01c9\3\144\2\143\1\u01c9\7\143\2\u01c9"+
    "\4\143\1\u01c9\1\143\1\u01c9\10\143\5\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\20\5\1\u01ca\7\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\14\5\1\u01cb"+
    "\13\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\10\5\1\u01cc\17\5\6\0\2\5\2\0\1\u01cd\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\13\5\1\u01ce\14\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\12\5\1\u01cf\15\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u01d0"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\2\5\1\u01d1\25\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u01d2\17\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u01d3\17\5\6\0"+
    "\2\5\2\0\1\u01d4\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u01d5"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\14\5\1\u01d6\13\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u01d7\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\u01d8\26\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\21\5\1\u01d9"+
    "\6\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\12\5\1\u01da\15\5\6\0\2\5\2\0\1\u01db\1\0"+
    "\3\5\5\0\30\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\10\5\1\u01dc\17\5\6\0\2\5\2\0"+
    "\1\u01dd\1\0\3\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\11\5\1\u01de\16\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\6\5\1\u01df"+
    "\21\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\6\5\1\u01e0\21\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u01e1\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\10\5\1\u01e2\17\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\5\1\u01e3"+
    "\26\5\1\0\10\252\1\366\3\252\2\u01e4\5\252\1\u01e4"+
    "\7\252\2\u01e4\4\252\1\u01e4\1\252\1\u01e4\10\252\1\137"+
    "\2\140\5\137\1\44\3\137\2\44\3\140\2\137\1\44"+
    "\7\137\2\44\4\137\1\44\1\137\1\44\10\137\12\256"+
    "\1\260\1\256\2\u01e5\5\256\1\u01e5\7\256\2\u01e5\4\256"+
    "\1\u01e5\1\256\1\u01e5\10\256\1\143\2\144\7\143\1\45"+
    "\1\143\2\45\3\144\2\143\1\45\7\143\2\45\4\143"+
    "\1\45\1\143\1\45\10\143\5\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\20\5\1\u01e6\7\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\15\5\1\u01e7\12\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\u01e8\21\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\15\5\1\u01e9\12\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\5\1\u01ea\26\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\u01eb\26\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\u01ec\26\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\20\5\1\u01ed\7\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\5\1\u01ee\26\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\22\5\1\u01ef\5\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\12\5"+
    "\1\u01f0\15\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\13\5\1\u01f1\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\15\5\1\u01f2\12\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\2\5\1\u01f3\25\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\10\5"+
    "\1\u01f4\17\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\13\5\1\u01f5\14\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\20\5\1\u01f6\7\5\1\0\10\252"+
    "\1\366\3\252\2\u01f7\5\252\1\u01f7\7\252\2\u01f7\4\252"+
    "\1\u01f7\1\252\1\u01f7\10\252\12\256\1\260\1\256\2\u01f8"+
    "\5\256\1\u01f8\7\256\2\u01f8\4\256\1\u01f8\1\256\1\u01f8"+
    "\10\256\5\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\15\5\1\u01f9\12\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\13\5\1\u01fa\14\5\6\0\2\5\2\0"+
    "\1\u01fb\1\0\3\5\5\0\30\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\13\5\1\u01fc\14\5\6\0"+
    "\2\5\2\0\1\u01fd\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\u01fe\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\u01ff\1\0\3\5\5\0\30\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\1\u0200\27\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\12\5"+
    "\1\u0201\15\5\6\0\2\5\2\0\1\u0202\1\0\3\5"+
    "\5\0\30\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\1\u0203\27\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\13\5\1\u0204\14\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\1\5\1\u0205\26\5\1\0"+
    "\10\252\1\366\3\252\2\366\5\252\1\366\7\252\2\366"+
    "\4\252\1\366\1\252\1\366\10\252\12\256\1\260\1\256"+
    "\2\260\5\256\1\260\7\256\2\260\4\256\1\260\1\256"+
    "\1\260\10\256\5\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\7\5\1\u0206\20\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\1\5\1\u0207\26\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\10\5\1\u0208\17\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\1\5"+
    "\1\u0209\26\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\12\5\1\u020a\15\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\12\5\1\u020b\15\5\6\0\2\5"+
    "\2\0\1\u020c\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\u020d\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\u020e\27\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\7\5\1\u020f"+
    "\20\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\5\1\u0210\26\5\6\0\2\5\2\0\1\5\1\0"+
    "\3\5\5\0\15\5\1\u0211\12\5\6\0\2\5\2\0"+
    "\1\5\1\0\3\5\5\0\20\5\1\u0212\7\5\6\0"+
    "\2\5\2\0\1\5\1\0\3\5\5\0\10\5\1\u0213"+
    "\17\5\6\0\2\5\2\0\1\5\1\0\3\5\5\0"+
    "\1\u0214\27\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\7\5\1\u0215\20\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u0216\17\5\6\0\2\5"+
    "\2\0\1\u0217\1\0\3\5\5\0\30\5\6\0\2\5"+
    "\2\0\1\5\1\0\3\5\5\0\1\5\1\u0218\26\5"+
    "\6\0\2\5\2\0\1\5\1\0\3\5\5\0\12\5"+
    "\1\u0219\15\5\6\0\2\5\2\0\1\5\1\0\3\5"+
    "\5\0\16\5\1\u021a\11\5\6\0\2\5\2\0\1\5"+
    "\1\0\3\5\5\0\10\5\1\u021b\17\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\3\11\22\1\1\11\6\0\65\1"+
    "\1\11\13\0\100\1\1\0\1\1\1\11\11\0\103\1"+
    "\3\0\1\1\1\0\2\1\3\0\72\1\5\0\65\1"+
    "\4\0\52\1\4\0\40\1\4\0\32\1\2\0\21\1"+
    "\2\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _YangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return YANG_CASE;
          }
        case 89: break;
        case 74: 
          { return YANG_IF_FEATURE;
          }
        case 90: break;
        case 26: 
          { return YANG_PATH;
          }
        case 91: break;
        case 38: 
          { return YANG_STATUS;
          }
        case 92: break;
        case 37: 
          { return YANG_REFINE;
          }
        case 93: break;
        case 22: 
          { return YANG_LIST;
          }
        case 94: break;
        case 53: 
          { return YANG_DEFAULT;
          }
        case 95: break;
        case 83: 
          { return YANG_NOT_SUPPORTED;
          }
        case 96: break;
        case 72: 
          { return YANG_BELONGS_TO;
          }
        case 97: break;
        case 11: 
          { return YANG_MIN;
          }
        case 98: break;
        case 30: 
          { return YANG_RANGE;
          }
        case 99: break;
        case 44: 
          { return YANG_DELETE;
          }
        case 100: break;
        case 17: 
          { return YANG_TRUE;
          }
        case 101: break;
        case 24: 
          { return YANG_BASE;
          }
        case 102: break;
        case 52: 
          { return YANG_CONTACT;
          }
        case 103: break;
        case 60: 
          { return YANG_IDENTITY;
          }
        case 104: break;
        case 20: 
          { return YANG_MUST;
          }
        case 105: break;
        case 57: 
          { return YANG_REVISION;
          }
        case 106: break;
        case 34: 
          { return YANG_ANYXML;
          }
        case 107: break;
        case 49: 
          { return YANG_REPLACE;
          }
        case 108: break;
        case 19: 
          { return YANG_USES;
          }
        case 109: break;
        case 62: 
          { return YANG_POSITION;
          }
        case 110: break;
        case 48: 
          { return YANG_AUGMENT;
          }
        case 111: break;
        case 84: 
          { return YANG_REVISION_DATE;
          }
        case 112: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 113: break;
        case 55: 
          { return YANG_PATTERN;
          }
        case 114: break;
        case 35: 
          { return YANG_MODULE;
          }
        case 115: break;
        case 32: 
          { return YANG_VALUE;
          }
        case 116: break;
        case 5: 
          { return YANG_LEFT_BRACE;
          }
        case 117: break;
        case 82: 
          { return YANG_ORGANIZATION;
          }
        case 118: break;
        case 28: 
          { return YANG_UNITS;
          }
        case 119: break;
        case 27: 
          { return YANG_WHEN;
          }
        case 120: break;
        case 59: 
          { return YANG_OBSOLETE;
          }
        case 121: break;
        case 18: 
          { return YANG_USER;
          }
        case 122: break;
        case 33: 
          { return YANG_UNIQUE;
          }
        case 123: break;
        case 14: 
          { return YANG_KEY;
          }
        case 124: break;
        case 63: 
          { return YANG_UNBOUNDED;
          }
        case 125: break;
        case 6: 
          { return YANG_RIGHT_BRACE;
          }
        case 126: break;
        case 73: 
          { return YANG_ORDERED_BY;
          }
        case 127: break;
        case 31: 
          { return YANG_INPUT;
          }
        case 128: break;
        case 75: 
          { return YANG_DEPRECATED;
          }
        case 129: break;
        case 7: 
          { return YANG_PLUS;
          }
        case 130: break;
        case 16: 
          { return YANG_TYPE;
          }
        case 131: break;
        case 86: 
          { return YANG_ERROR_MESSAGE;
          }
        case 132: break;
        case 8: 
          { return COMMENT;
          }
        case 133: break;
        case 42: 
          { return YANG_CONFIG;
          }
        case 134: break;
        case 71: 
          { return YANG_DEVIATION;
          }
        case 135: break;
        case 85: 
          { return YANG_ERROR_APP_TAG;
          }
        case 136: break;
        case 61: 
          { return YANG_PRESENCE;
          }
        case 137: break;
        case 23: 
          { return YANG_ENUM;
          }
        case 138: break;
        case 9: 
          { return YANG_ADD;
          }
        case 139: break;
        case 64: 
          { return YANG_NAMESPACE;
          }
        case 140: break;
        case 66: 
          { return YANG_LEAF_LIST;
          }
        case 141: break;
        case 4: 
          { return YANG_SEMICOLON;
          }
        case 142: break;
        case 67: 
          { return YANG_REFERENCE;
          }
        case 143: break;
        case 3: 
          { return YANG_IDENTIFIER;
          }
        case 144: break;
        case 45: 
          { return YANG_PREFIX;
          }
        case 145: break;
        case 41: 
          { return YANG_IMPORT;
          }
        case 146: break;
        case 77: 
          { return YANG_DESCRIPTION;
          }
        case 147: break;
        case 15: 
          { return YANG_STRING;
          }
        case 148: break;
        case 81: 
          { return YANG_MIN_ELEMENTS;
          }
        case 149: break;
        case 54: 
          { return YANG_DEVIATE;
          }
        case 150: break;
        case 46: 
          { return YANG_TYPEDEF;
          }
        case 151: break;
        case 10: 
          { return YANG_MAX;
          }
        case 152: break;
        case 80: 
          { return YANG_MAX_ELEMENTS;
          }
        case 153: break;
        case 76: 
          { return YANG_YIN_ELEMENT;
          }
        case 154: break;
        case 39: 
          { return YANG_SYSTEM;
          }
        case 155: break;
        case 21: 
          { return YANG_LEAF;
          }
        case 156: break;
        case 29: 
          { return YANG_FALSE;
          }
        case 157: break;
        case 47: 
          { return YANG_FEATURE;
          }
        case 158: break;
        case 12: 
          { return YANG_RPC;
          }
        case 159: break;
        case 70: 
          { return YANG_CONTAINER;
          }
        case 160: break;
        case 43: 
          { return YANG_CHOICE;
          }
        case 161: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 162: break;
        case 65: 
          { return YANG_MANDATORY;
          }
        case 163: break;
        case 78: 
          { return YANG_NOTIFICATION;
          }
        case 164: break;
        case 88: 
          { return YANG_REQUIRE_INSTANCE;
          }
        case 165: break;
        case 87: 
          { return YANG_FRACTION_DIGITS;
          }
        case 166: break;
        case 13: 
          { return YANG_BIT;
          }
        case 167: break;
        case 50: 
          { return YANG_INCLUDE;
          }
        case 168: break;
        case 56: 
          { return YANG_ARGUMENT;
          }
        case 169: break;
        case 51: 
          { return YANG_CURRENT;
          }
        case 170: break;
        case 68: 
          { return YANG_EXTENSION;
          }
        case 171: break;
        case 79: 
          { return YANG_YANG_VERSION;
          }
        case 172: break;
        case 36: 
          { return YANG_LENGTH;
          }
        case 173: break;
        case 69: 
          { return YANG_SUBMODULE;
          }
        case 174: break;
        case 40: 
          { return YANG_OUTPUT;
          }
        case 175: break;
        case 58: 
          { return YANG_GROUPING;
          }
        case 176: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
