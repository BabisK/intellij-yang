/* The following code was generated by JFlex 1.4.3 on 6/12/14 4:20 PM */

package org.intellij.yang.lexer;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.intellij.yang.psi.YangTypes.*;
import static org.intellij.yang.psi.YangTokenTypeSets.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/12/14 4:20 PM from the specification file
 * <tt>/Users/dave/dev/yang/src/org/intellij/yang/lexer/_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\12"+
    "\4\0\1\0\2\0\1\5\1\6\1\0\1\13\1\7\1\4\1\7"+
    "\7\7\2\7\1\14\1\15\5\0\6\7\24\7\1\0\1\11\2\0"+
    "\1\43\1\0\1\20\1\32\1\36\1\41\1\30\1\40\1\26\1\37"+
    "\1\35\1\7\1\45\1\24\1\23\1\21\1\34\1\42\1\47\1\25"+
    "\1\33\1\31\1\27\1\44\1\50\1\10\1\22\1\46\1\16\1\0"+
    "\1\17\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\1\1\5"+
    "\1\6\1\7\25\3\4\0\57\3\2\2\2\0\23\3"+
    "\1\10\11\3\1\11\26\3\1\12\1\3\1\0\1\2"+
    "\11\3\1\13\2\3\1\14\1\3\1\15\10\3\1\16"+
    "\1\3\1\17\1\3\1\20\1\21\13\3\1\22\11\3"+
    "\1\23\4\3\1\24\15\3\1\25\5\3\1\26\13\3"+
    "\1\27\17\3\1\30\1\31\10\3\1\32\2\3\1\33"+
    "\1\3\1\34\3\3\1\35\5\3\1\36\2\3\1\37"+
    "\1\3\1\40\4\3\1\41\1\42\7\3\1\43\2\3"+
    "\1\44\17\3\1\45\4\3\1\46\3\3\1\47\1\3"+
    "\1\50\1\3\1\51\1\52\1\3\1\53\2\3\1\54"+
    "\11\3\1\55\1\3\1\56\10\3\1\57\4\3\1\60"+
    "\1\61\1\62\4\3\1\63\1\3\1\64\1\65\2\3"+
    "\1\66\3\3\1\67\3\3\1\70\2\3\1\71\11\3"+
    "\1\72\1\3\1\73\1\74\4\3\1\75\10\3\1\76"+
    "\1\77\1\100\1\101\1\102\4\3\1\103\1\3\1\104"+
    "\1\3\1\105\1\106\4\3\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\51\0\244\0\315\0\51"+
    "\0\51\0\51\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3"+
    "\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\315\0\u04a5\0\51\0\u04ce\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\u0c03\0\u0c2c\0\51\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\244\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f"+
    "\0\u10a8\0\u10d1\0\u10fa\0\244\0\u1123\0\u114c\0\u1175\0\u119e"+
    "\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e"+
    "\0\u1457\0\u1480\0\244\0\u14a9\0\u14d2\0\u0c55\0\u14fb\0\u1524"+
    "\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\244"+
    "\0\u166c\0\u1695\0\u16be\0\u16e7\0\244\0\u1710\0\u1739\0\u1762"+
    "\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\244\0\u1858\0\244"+
    "\0\u1881\0\u18aa\0\244\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\244\0\u1a96"+
    "\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde"+
    "\0\244\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\244\0\u1cab\0\u1cd4"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\u1e97\0\244\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b"+
    "\0\u1f64\0\244\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a"+
    "\0\u2083\0\u20ac\0\u20d5\0\u20fe\0\u2127\0\244\0\u2150\0\u2179"+
    "\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1"+
    "\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\244\0\244\0\u23b7"+
    "\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\244"+
    "\0\u24ff\0\u2528\0\244\0\u2551\0\244\0\u257a\0\u25a3\0\u25cc"+
    "\0\244\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\244\0\u26c2"+
    "\0\u26eb\0\244\0\u2714\0\244\0\u273d\0\u2766\0\u278f\0\u27b8"+
    "\0\244\0\244\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae"+
    "\0\u28d7\0\244\0\u2900\0\u2929\0\244\0\u2952\0\u297b\0\u29a4"+
    "\0\u29cd\0\u29f6\0\u2a1f\0\u2a48\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec"+
    "\0\u2b15\0\u2b3e\0\u2b67\0\u2b90\0\244\0\u2bb9\0\u2be2\0\u2c0b"+
    "\0\u2c34\0\244\0\u2c5d\0\u2c86\0\u2caf\0\244\0\u2cd8\0\244"+
    "\0\u2d01\0\244\0\244\0\u2d2a\0\244\0\u2d53\0\u2d7c\0\244"+
    "\0\u2da5\0\u2dce\0\u2df7\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4"+
    "\0\u2eed\0\u2f16\0\u2f3f\0\244\0\u2f68\0\u2f91\0\u2fba\0\u2fe3"+
    "\0\u300c\0\u3035\0\u305e\0\u3087\0\244\0\u30b0\0\u30d9\0\u3102"+
    "\0\u312b\0\244\0\244\0\244\0\u3154\0\u317d\0\u31a6\0\u31cf"+
    "\0\244\0\u31f8\0\244\0\244\0\u3221\0\u324a\0\244\0\u3273"+
    "\0\u329c\0\u32c5\0\244\0\u32ee\0\u3317\0\u3340\0\244\0\u3369"+
    "\0\u3392\0\244\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f\0\u3488"+
    "\0\u34b1\0\u34da\0\u3503\0\244\0\u352c\0\244\0\244\0\u3555"+
    "\0\u357e\0\u35a7\0\u35d0\0\244\0\u35f9\0\u3622\0\u364b\0\u3674"+
    "\0\u369d\0\u36c6\0\u36ef\0\u3718\0\244\0\244\0\244\0\244"+
    "\0\244\0\u3741\0\u376a\0\u3793\0\u37bc\0\244\0\u37e5\0\244"+
    "\0\u380e\0\244\0\244\0\u3837\0\u3860\0\u3889\0\u38b2\0\244"+
    "\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\2\6\1\2\1\7"+
    "\1\6\1\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\6\1\32\1\33\1\34"+
    "\1\6\1\35\1\36\2\6\1\37\52\0\3\3\51\0"+
    "\1\40\1\41\1\0\2\6\2\0\2\6\3\0\31\6"+
    "\7\0\2\6\2\0\2\6\3\0\31\6\11\42\1\43"+
    "\1\44\36\42\7\0\2\6\2\0\2\6\3\0\1\6"+
    "\1\45\3\6\1\46\1\6\1\47\21\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\50\13\6\1\51\14\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\52\14\6\1\53\13\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\54\6\6\1\55"+
    "\4\6\1\56\1\57\13\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\60\4\6\1\61\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\62\7\6\1\63\11\6\1\64"+
    "\6\6\7\0\2\6\2\0\2\6\3\0\5\6\1\65"+
    "\23\6\7\0\2\6\2\0\2\6\3\0\1\6\1\66"+
    "\11\6\1\67\15\6\7\0\1\6\1\70\2\0\2\6"+
    "\3\0\1\6\1\71\3\6\1\72\23\6\7\0\2\6"+
    "\2\0\2\6\3\0\2\6\1\73\26\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\74\7\6\1\75\4\6\1\76"+
    "\13\6\7\0\2\6\2\0\2\6\3\0\7\6\1\77"+
    "\1\6\1\100\17\6\7\0\2\6\2\0\2\6\3\0"+
    "\5\6\1\101\1\6\1\102\21\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\103\1\6\1\104\14\6\1\105"+
    "\1\106\7\6\7\0\2\6\2\0\2\6\3\0\1\107"+
    "\13\6\1\110\2\6\1\111\11\6\7\0\2\6\2\0"+
    "\2\6\3\0\5\6\1\112\2\6\1\113\20\6\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\1\114\20\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\115\4\6\1\116\6\6"+
    "\1\117\14\6\7\0\2\6\2\0\2\6\3\0\1\120"+
    "\30\6\7\0\2\6\2\0\2\6\3\0\10\6\1\121"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\17\6\1\122"+
    "\11\6\1\40\1\123\1\124\46\40\5\125\1\126\43\125"+
    "\51\42\7\0\2\6\2\0\2\6\3\0\2\6\1\127"+
    "\26\6\7\0\2\6\2\0\2\6\3\0\6\6\1\130"+
    "\22\6\7\0\2\6\2\0\2\6\3\0\6\6\1\131"+
    "\22\6\7\0\2\6\2\0\2\6\3\0\3\6\1\132"+
    "\25\6\7\0\2\6\2\0\2\6\3\0\11\6\1\133"+
    "\17\6\7\0\2\6\2\0\2\6\3\0\1\6\1\134"+
    "\27\6\7\0\2\6\2\0\2\6\3\0\1\6\1\135"+
    "\27\6\7\0\1\6\1\136\2\0\2\6\3\0\1\6"+
    "\1\137\27\6\7\0\2\6\2\0\2\6\3\0\13\6"+
    "\1\140\15\6\7\0\2\6\2\0\2\6\3\0\21\6"+
    "\1\141\7\6\7\0\2\6\2\0\2\6\3\0\1\6"+
    "\1\142\27\6\7\0\2\6\2\0\2\6\3\0\1\143"+
    "\1\144\27\6\7\0\2\6\2\0\2\6\3\0\13\6"+
    "\1\145\15\6\7\0\2\6\2\0\2\6\3\0\1\6"+
    "\1\146\27\6\7\0\2\6\2\0\2\6\3\0\20\6"+
    "\1\147\3\6\1\150\2\6\1\151\1\6\7\0\2\6"+
    "\2\0\2\6\3\0\16\6\1\152\12\6\7\0\2\6"+
    "\2\0\2\6\3\0\14\6\1\153\14\6\7\0\2\6"+
    "\2\0\2\6\3\0\15\6\1\154\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\155\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\156\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\1\157\21\6\7\0\2\6"+
    "\2\0\2\6\3\0\5\6\1\160\23\6\7\0\2\6"+
    "\2\0\2\6\3\0\22\6\1\161\6\6\7\0\2\6"+
    "\2\0\2\6\3\0\13\6\1\162\15\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\163\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\164\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\12\6\1\165\16\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\166\30\6\7\0\2\6\2\0"+
    "\2\6\3\0\6\6\1\167\12\6\1\170\7\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\171\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\16\6\1\172\3\6\1\173"+
    "\6\6\7\0\2\6\2\0\2\6\3\0\22\6\1\174"+
    "\6\6\7\0\2\6\2\0\1\175\1\6\3\0\31\6"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\1\176\20\6"+
    "\7\0\2\6\2\0\2\6\3\0\13\6\1\177\15\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\200\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\14\6\1\201\14\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\202\30\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\203\30\6\7\0\2\6"+
    "\2\0\2\6\3\0\13\6\1\204\4\6\1\205\3\6"+
    "\1\206\4\6\7\0\2\6\2\0\2\6\3\0\11\6"+
    "\1\207\17\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\210\20\6\7\0\2\6\2\0\2\6\3\0\13\6"+
    "\1\211\15\6\7\0\2\6\2\0\2\6\3\0\4\6"+
    "\1\212\24\6\7\0\2\6\2\0\2\6\3\0\2\6"+
    "\1\213\26\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\214\20\6\2\0\1\124\46\0\5\125\1\215\47\125"+
    "\1\216\1\215\43\125\7\0\1\6\1\217\2\0\2\6"+
    "\3\0\31\6\7\0\2\6\2\0\2\6\3\0\7\6"+
    "\1\220\21\6\7\0\2\6\2\0\2\6\3\0\3\6"+
    "\1\221\25\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\222\20\6\7\0\2\6\2\0\2\6\3\0\15\6"+
    "\1\223\13\6\7\0\2\6\2\0\2\6\3\0\6\6"+
    "\1\224\22\6\7\0\2\6\2\0\1\225\1\6\3\0"+
    "\31\6\7\0\2\6\2\0\1\226\1\6\3\0\31\6"+
    "\7\0\2\6\2\0\2\6\3\0\21\6\1\227\7\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\230\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\1\231\21\6"+
    "\7\0\2\6\2\0\1\232\1\6\3\0\31\6\7\0"+
    "\2\6\2\0\2\6\3\0\20\6\1\233\10\6\7\0"+
    "\2\6\2\0\2\6\3\0\6\6\1\234\22\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\235\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\6\6\1\236\22\6\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\1\237\4\6\1\240"+
    "\13\6\7\0\2\6\2\0\2\6\3\0\15\6\1\241"+
    "\13\6\7\0\2\6\2\0\2\6\3\0\7\6\1\242"+
    "\21\6\7\0\2\6\2\0\2\6\3\0\7\6\1\243"+
    "\21\6\7\0\2\6\2\0\2\6\3\0\11\6\1\244"+
    "\15\6\1\245\1\6\7\0\2\6\2\0\2\6\3\0"+
    "\13\6\1\246\15\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\247\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\3\6\1\250\25\6\7\0\2\6\2\0\2\6\3\0"+
    "\14\6\1\251\14\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\252\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\253\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\14\6\1\254\14\6\7\0\2\6\2\0\2\6\3\0"+
    "\3\6\1\255\25\6\7\0\2\6\2\0\2\6\3\0"+
    "\11\6\1\256\17\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\257\30\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\260\20\6\7\0\2\6\2\0\2\6\3\0\22\6"+
    "\1\261\6\6\7\0\2\6\2\0\2\6\3\0\4\6"+
    "\1\262\24\6\7\0\2\6\2\0\2\6\3\0\7\6"+
    "\1\263\21\6\7\0\2\6\2\0\2\6\3\0\14\6"+
    "\1\264\14\6\7\0\2\6\2\0\2\6\3\0\20\6"+
    "\1\265\10\6\7\0\2\6\2\0\2\6\3\0\1\6"+
    "\1\266\27\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\267\20\6\7\0\2\6\2\0\2\6\3\0\11\6"+
    "\1\270\6\6\1\271\10\6\7\0\2\6\2\0\2\6"+
    "\3\0\15\6\1\272\13\6\7\0\2\6\2\0\2\6"+
    "\3\0\16\6\1\273\12\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\274\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\16\6\1\275\12\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\276\30\6\7\0\2\6\2\0\2\6\3\0"+
    "\15\6\1\277\13\6\7\0\2\6\2\0\2\6\3\0"+
    "\11\6\1\300\5\6\1\301\11\6\7\0\2\6\2\0"+
    "\2\6\3\0\13\6\1\302\4\6\1\303\10\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\304\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\1\305\21\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\306\27\6\4\125"+
    "\1\124\1\215\43\125\7\0\2\6\2\0\2\6\3\0"+
    "\3\6\1\307\25\6\7\0\2\6\2\0\2\6\3\0"+
    "\3\6\1\310\25\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\311\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\13\6\1\312\15\6\7\0\2\6\2\0\2\6\3\0"+
    "\20\6\1\313\10\6\7\0\2\6\2\0\1\314\1\6"+
    "\3\0\31\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\315\20\6\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\1\316\20\6\7\0\2\6\2\0\2\6\3\0\1\317"+
    "\30\6\7\0\2\6\2\0\2\6\3\0\4\6\1\320"+
    "\24\6\7\0\2\6\2\0\2\6\3\0\10\6\1\321"+
    "\20\6\7\0\2\6\2\0\1\322\1\6\3\0\31\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\323\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\1\324\20\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\325\23\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\326\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\13\6\1\327\15\6"+
    "\7\0\2\6\2\0\2\6\3\0\15\6\1\330\13\6"+
    "\7\0\2\6\2\0\2\6\3\0\22\6\1\331\6\6"+
    "\7\0\2\6\2\0\2\6\3\0\13\6\1\332\15\6"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\1\333\21\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\334\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\335\23\6"+
    "\7\0\2\6\2\0\2\6\3\0\21\6\1\336\7\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\337\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\14\6\1\340\14\6"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\1\341\21\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\342\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\343\23\6"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\1\344\21\6"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\1\345\21\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\346\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\347\23\6"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\1\350\20\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\351\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\352\30\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\353\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\16\6\1\354\12\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\355\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\1\356\21\6\7\0"+
    "\2\6\2\0\2\6\3\0\5\6\1\357\23\6\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\1\360\21\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\361\30\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\362\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\363\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\15\6\1\364\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\365\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\366\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\367\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\370\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\6\1\371\27\6\7\0\2\6"+
    "\2\0\2\6\3\0\22\6\1\372\6\6\7\0\2\6"+
    "\2\0\2\6\3\0\15\6\1\373\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\24\6\1\374\4\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\375\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\376\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\377\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\u0100\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\u0101\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\4\6\1\u0102\24\6\7\0\2\6"+
    "\2\0\2\6\3\0\17\6\1\u0103\11\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\u0104\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\u0105\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\15\6\1\u0106\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\5\6\1\u0107\23\6\7\0\2\6"+
    "\2\0\2\6\3\0\15\6\1\u0108\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\1\u0109\20\6\7\0\2\6"+
    "\2\0\2\6\3\0\13\6\1\u010a\15\6\7\0\2\6"+
    "\2\0\1\u010b\1\6\3\0\31\6\7\0\2\6\2\0"+
    "\2\6\3\0\10\6\1\u010c\20\6\7\0\2\6\2\0"+
    "\2\6\3\0\6\6\1\u010d\22\6\7\0\2\6\2\0"+
    "\2\6\3\0\21\6\1\u010e\7\6\7\0\2\6\2\0"+
    "\2\6\3\0\13\6\1\u010f\15\6\7\0\2\6\2\0"+
    "\2\6\3\0\15\6\1\u0110\13\6\7\0\2\6\2\0"+
    "\2\6\3\0\10\6\1\u0111\20\6\7\0\2\6\2\0"+
    "\2\6\3\0\11\6\1\u0112\17\6\7\0\2\6\2\0"+
    "\2\6\3\0\21\6\1\u0113\7\6\7\0\2\6\2\0"+
    "\2\6\3\0\11\6\1\u0114\17\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\u0115\30\6\7\0\2\6\2\0\2\6"+
    "\3\0\15\6\1\u0116\13\6\7\0\2\6\2\0\2\6"+
    "\3\0\15\6\1\u0117\1\u0118\12\6\7\0\2\6\2\0"+
    "\2\6\3\0\6\6\1\u0119\22\6\7\0\2\6\2\0"+
    "\2\6\3\0\10\6\1\u011a\20\6\7\0\2\6\2\0"+
    "\2\6\3\0\15\6\1\u011b\13\6\7\0\2\6\2\0"+
    "\2\6\3\0\5\6\1\u011c\23\6\7\0\2\6\2\0"+
    "\2\6\3\0\15\6\1\u011d\13\6\7\0\2\6\2\0"+
    "\2\6\3\0\4\6\1\u011e\24\6\7\0\2\6\2\0"+
    "\2\6\3\0\11\6\1\u011f\17\6\7\0\2\6\2\0"+
    "\2\6\3\0\5\6\1\u0120\23\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\u0121\27\6\7\0\1\6\1\u0122"+
    "\2\0\2\6\3\0\31\6\7\0\2\6\2\0\2\6"+
    "\3\0\15\6\1\u0123\13\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\6\1\u0124\27\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\u0125\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\u0126\30\6\7\0\2\6\2\0\2\6\3\0"+
    "\16\6\1\u0127\12\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u0128\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u0129\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u012a\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\14\6\1\u012b\14\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u012c\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\15\6\1\u012d\13\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\6\1\u012e\27\6\7\0\2\6\2\0\2\6\3\0"+
    "\14\6\1\u012f\14\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u0130\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\6\1\u0131\27\6\7\0\2\6\2\0\2\6\3\0"+
    "\15\6\1\u0132\13\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\u0133\2\6\1\u0134\25\6\7\0\2\6\2\0\2\6"+
    "\3\0\20\6\1\u0135\10\6\7\0\2\6\2\0\2\6"+
    "\3\0\13\6\1\u0136\15\6\7\0\2\6\2\0\2\6"+
    "\3\0\7\6\1\u0137\21\6\7\0\2\6\2\0\2\6"+
    "\3\0\26\6\1\u0138\2\6\7\0\2\6\2\0\2\6"+
    "\3\0\21\6\1\u0139\7\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\u013a\20\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\u013b\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\u013c\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\6\1\u013d\27\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\u013e\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\14\6\1\u013f\14\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\u0140\20\6\7\0\2\6\2\0\2\6"+
    "\3\0\22\6\1\u0141\6\6\7\0\2\6\2\0\2\6"+
    "\3\0\11\6\1\u0142\17\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\u0143\4\6\1\u0144\13\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\6\1\u0145\27\6\7\0\2\6"+
    "\2\0\2\6\3\0\16\6\1\u0146\12\6\7\0\2\6"+
    "\2\0\2\6\3\0\14\6\1\u0147\14\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\u0148\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\16\6\1\u0149\12\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\u014a\30\6\7\0\2\6\2\0"+
    "\2\6\3\0\5\6\1\u014b\23\6\7\0\2\6\2\0"+
    "\2\6\3\0\3\6\1\u014c\25\6\7\0\2\6\2\0"+
    "\2\6\3\0\3\6\1\u014d\25\6\7\0\2\6\2\0"+
    "\2\6\3\0\5\6\1\u014e\23\6\7\0\2\6\2\0"+
    "\2\6\3\0\3\6\1\u014f\25\6\7\0\2\6\2\0"+
    "\2\6\3\0\13\6\1\u0150\15\6\7\0\2\6\2\0"+
    "\2\6\3\0\16\6\1\u0151\12\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\u0152\27\6\7\0\2\6\2\0"+
    "\1\u0153\1\6\3\0\31\6\7\0\2\6\2\0\2\6"+
    "\3\0\6\6\1\u0154\22\6\7\0\2\6\2\0\2\6"+
    "\3\0\14\6\1\u0155\14\6\7\0\2\6\2\0\2\6"+
    "\3\0\22\6\1\u0156\6\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\u0157\20\6\7\0\2\6\2\0\1\u0158"+
    "\1\6\3\0\31\6\7\0\2\6\2\0\2\6\3\0"+
    "\4\6\1\u0159\24\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\u015a\30\6\7\0\2\6\2\0\1\u015b\1\6\3\0"+
    "\31\6\7\0\2\6\2\0\2\6\3\0\7\6\1\u015c"+
    "\21\6\7\0\2\6\2\0\2\6\3\0\2\6\1\u015d"+
    "\26\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u015e"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\1\6\1\u015f"+
    "\27\6\7\0\2\6\2\0\2\6\3\0\11\6\1\u0160"+
    "\17\6\7\0\2\6\2\0\2\6\3\0\14\6\1\u0161"+
    "\14\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u0162"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\1\6\1\u0163"+
    "\27\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u0164"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\11\6\1\u0165"+
    "\17\6\7\0\2\6\2\0\2\6\3\0\13\6\1\u0166"+
    "\15\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u0167"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u0168"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\2\6\1\u0169"+
    "\26\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u016a"+
    "\20\6\7\0\2\6\2\0\2\6\3\0\11\6\1\u016b"+
    "\17\6\7\0\2\6\2\0\2\6\3\0\10\6\1\u016c"+
    "\20\6\7\0\2\6\2\0\1\u016d\1\6\3\0\31\6"+
    "\7\0\2\6\2\0\2\6\3\0\15\6\1\u016e\13\6"+
    "\7\0\2\6\2\0\2\6\3\0\1\6\1\u016f\27\6"+
    "\7\0\2\6\2\0\2\6\3\0\22\6\1\u0170\6\6"+
    "\7\0\2\6\2\0\2\6\3\0\13\6\1\u0171\15\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\u0172\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\1\u0173\20\6"+
    "\7\0\2\6\2\0\2\6\3\0\11\6\1\u0174\17\6"+
    "\7\0\2\6\2\0\2\6\3\0\12\6\1\u0175\16\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\u0176\23\6"+
    "\7\0\2\6\2\0\2\6\3\0\5\6\1\u0177\23\6"+
    "\7\0\2\6\2\0\1\u0178\1\6\3\0\31\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\u0179\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\u017a\27\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\u017b\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\u017c\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\u017d\27\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\u017e\27\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\u017f\27\6\7\0"+
    "\2\6\2\0\2\6\3\0\21\6\1\u0180\7\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\6\1\u0181\27\6\7\0"+
    "\2\6\2\0\2\6\3\0\23\6\1\u0182\5\6\7\0"+
    "\2\6\2\0\2\6\3\0\13\6\1\u0183\15\6\7\0"+
    "\2\6\2\0\2\6\3\0\14\6\1\u0184\14\6\7\0"+
    "\2\6\2\0\2\6\3\0\15\6\1\u0185\13\6\7\0"+
    "\2\6\2\0\2\6\3\0\2\6\1\u0186\26\6\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\1\u0187\20\6\7\0"+
    "\2\6\2\0\2\6\3\0\21\6\1\u0188\7\6\7\0"+
    "\2\6\2\0\2\6\3\0\14\6\1\u0189\14\6\7\0"+
    "\2\6\2\0\2\6\3\0\14\6\1\u018a\14\6\7\0"+
    "\2\6\2\0\2\6\3\0\14\6\1\u018b\14\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\u018c\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\u018d\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\11\6\1\u018e\17\6\7\0"+
    "\2\6\2\0\2\6\3\0\1\u018f\30\6\7\0\2\6"+
    "\2\0\2\6\3\0\13\6\1\u0190\15\6\7\0\2\6"+
    "\2\0\2\6\3\0\11\6\1\u0191\17\6\7\0\2\6"+
    "\2\0\2\6\3\0\1\u0192\30\6\7\0\2\6\2\0"+
    "\2\6\3\0\14\6\1\u0193\14\6\7\0\2\6\2\0"+
    "\2\6\3\0\15\6\1\u0194\13\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\u0195\27\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\u0196\27\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\6\1\u0197\27\6\7\0\2\6\2\0"+
    "\2\6\3\0\13\6\1\u0198\15\6\7\0\2\6\2\0"+
    "\2\6\3\0\13\6\1\u0199\15\6\7\0\2\6\2\0"+
    "\2\6\3\0\11\6\1\u019a\17\6\7\0\2\6\2\0"+
    "\2\6\3\0\11\6\1\u019b\17\6\7\0\2\6\2\0"+
    "\2\6\3\0\1\u019c\30\6\7\0\2\6\2\0\2\6"+
    "\3\0\6\6\1\u019d\22\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\6\1\u019e\27\6\7\0\2\6\2\0\2\6"+
    "\3\0\6\6\1\u019f\22\6\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\1\u01a0\20\6\7\0\2\6\2\0\2\6"+
    "\3\0\1\u01a1\30\6\7\0\2\6\2\0\2\6\3\0"+
    "\6\6\1\u01a2\22\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u01a3\20\6\7\0\2\6\2\0\2\6\3\0"+
    "\15\6\1\u01a4\13\6\7\0\2\6\2\0\2\6\3\0"+
    "\1\6\1\u01a5\27\6\7\0\2\6\2\0\2\6\3\0"+
    "\11\6\1\u01a6\17\6\7\0\2\6\2\0\2\6\3\0"+
    "\16\6\1\u01a7\12\6\7\0\2\6\2\0\2\6\3\0"+
    "\13\6\1\u01a8\15\6\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\1\u01a9\20\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\3\11\25\1\4\0"+
    "\1\11\57\1\1\11\2\0\66\1\1\0\u011c\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _YangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { return YANG_FRACTION_DIGITS_KEYWORD;
          }
        case 73: break;
        case 72: 
          { return YANG_REQUIRE_INSTANCE_KEYWORD;
          }
        case 74: break;
        case 33: 
          { return YANG_CONFIG_KEYWORD;
          }
        case 75: break;
        case 19: 
          { return YANG_PATH_KEYWORD;
          }
        case 76: break;
        case 8: 
          { return YANG_RPC_KEYWORD;
          }
        case 77: break;
        case 69: 
          { return YANG_ERROR_APP_TAG_KEYWORD;
          }
        case 78: break;
        case 54: 
          { return YANG_EXTENSION_KEYWORD;
          }
        case 79: break;
        case 43: 
          { return YANG_PATTERN_KEYWORD;
          }
        case 80: break;
        case 64: 
          { return YANG_YANG_VERSION_KEYWORD;
          }
        case 81: break;
        case 16: 
          { return YANG_TYPE_KEYWORD;
          }
        case 82: break;
        case 25: 
          { return YANG_ANYXML_KEYWORD;
          }
        case 83: break;
        case 13: 
          { return YANG_LIST_KEYWORD;
          }
        case 84: break;
        case 45: 
          { return YANG_REVISION_KEYWORD;
          }
        case 85: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 86: break;
        case 38: 
          { return YANG_INCLUDE_KEYWORD;
          }
        case 87: break;
        case 17: 
          { return YANG_BASE_KEYWORD;
          }
        case 88: break;
        case 6: 
          { return YANG_LEFT_BRACE;
          }
        case 89: break;
        case 68: 
          { return YANG_REVISION_DATE_KEYWORD;
          }
        case 90: break;
        case 59: 
          { return YANG_ORDERED_BY_KEYWORD;
          }
        case 91: break;
        case 35: 
          { return YANG_PREFIX_KEYWORD;
          }
        case 92: break;
        case 14: 
          { return YANG_USES_KEYWORD;
          }
        case 93: break;
        case 55: 
          { return YANG_SUBMODULE_KEYWORD;
          }
        case 94: break;
        case 30: 
          { return YANG_STATUS_KEYWORD;
          }
        case 95: break;
        case 57: 
          { return YANG_DEVIATION_KEYWORD;
          }
        case 96: break;
        case 40: 
          { return YANG_FEATURE_KEYWORD;
          }
        case 97: break;
        case 44: 
          { return YANG_ARGUMENT_KEYWORD;
          }
        case 98: break;
        case 9: 
          { return YANG_BIT_KEYWORD;
          }
        case 99: break;
        case 65: 
          { return YANG_MAX_ELEMENTS_KEYWORD;
          }
        case 100: break;
        case 58: 
          { return YANG_BELONGS_TO_KEYWORD;
          }
        case 101: break;
        case 56: 
          { return YANG_CONTAINER_KEYWORD;
          }
        case 102: break;
        case 27: 
          { return YANG_LENGTH_KEYWORD;
          }
        case 103: break;
        case 7: 
          { return YANG_RIGHT_BRACE;
          }
        case 104: break;
        case 42: 
          { return YANG_DEVIATE_KEYWORD;
          }
        case 105: break;
        case 41: 
          { return YANG_DEFAULT_KEYWORD;
          }
        case 106: break;
        case 11: 
          { return YANG_MUST_KEYWORD;
          }
        case 107: break;
        case 47: 
          { return YANG_IDENTITY_KEYWORD;
          }
        case 108: break;
        case 4: 
          { return YANG_PLUS;
          }
        case 109: break;
        case 63: 
          { return YANG_NOTIFICATION_KEYWORD;
          }
        case 110: break;
        case 23: 
          { return YANG_INPUT_KEYWORD;
          }
        case 111: break;
        case 51: 
          { return YANG_MANDATORY_KEYWORD;
          }
        case 112: break;
        case 31: 
          { return YANG_OUTPUT_KEYWORD;
          }
        case 113: break;
        case 29: 
          { return YANG_UNIQUE_KEYWORD;
          }
        case 114: break;
        case 53: 
          { return YANG_REFERENCE_KEYWORD;
          }
        case 115: break;
        case 15: 
          { return YANG_ENUM_KEYWORD;
          }
        case 116: break;
        case 5: 
          { return YANG_SEMICOLON;
          }
        case 117: break;
        case 10: 
          { return YANG_KEY_KEYWORD;
          }
        case 118: break;
        case 21: 
          { return YANG_RANGE_KEYWORD;
          }
        case 119: break;
        case 18: 
          { return YANG_CASE_KEYWORD;
          }
        case 120: break;
        case 60: 
          { return YANG_IF_FEATURE_KEYWORD;
          }
        case 121: break;
        case 28: 
          { return YANG_REFINE_KEYWORD;
          }
        case 122: break;
        case 3: 
          { return YANG_STRING;
          }
        case 123: break;
        case 62: 
          { return YANG_DESCRIPTION_KEYWORD;
          }
        case 124: break;
        case 50: 
          { return YANG_NAMESPACE_KEYWORD;
          }
        case 125: break;
        case 26: 
          { return YANG_MODULE_KEYWORD;
          }
        case 126: break;
        case 52: 
          { return YANG_LEAF_LIST_KEYWORD;
          }
        case 127: break;
        case 37: 
          { return YANG_TYPEDEF_KEYWORD;
          }
        case 128: break;
        case 67: 
          { return YANG_ORGANIZATION_KEYWORD;
          }
        case 129: break;
        case 32: 
          { return YANG_IMPORT_KEYWORD;
          }
        case 130: break;
        case 12: 
          { return YANG_LEAF_KEYWORD;
          }
        case 131: break;
        case 46: 
          { return YANG_GROUPING_KEYWORD;
          }
        case 132: break;
        case 49: 
          { return YANG_POSITION_KEYWORD;
          }
        case 133: break;
        case 20: 
          { return YANG_WHEN_KEYWORD;
          }
        case 134: break;
        case 70: 
          { return YANG_ERROR_MESSAGE_KEYWORD;
          }
        case 135: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 136: break;
        case 39: 
          { return YANG_CONTACT_KEYWORD;
          }
        case 137: break;
        case 22: 
          { return YANG_UNITS_KEYWORD;
          }
        case 138: break;
        case 48: 
          { return YANG_PRESENCE_KEYWORD;
          }
        case 139: break;
        case 61: 
          { return YANG_YIN_ELEMENT_KEYWORD;
          }
        case 140: break;
        case 24: 
          { return YANG_VALUE_KEYWORD;
          }
        case 141: break;
        case 36: 
          { return YANG_AUGMENT_KEYWORD;
          }
        case 142: break;
        case 66: 
          { return YANG_MIN_ELEMENTS_KEYWORD;
          }
        case 143: break;
        case 34: 
          { return YANG_CHOICE_KEYWORD;
          }
        case 144: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
