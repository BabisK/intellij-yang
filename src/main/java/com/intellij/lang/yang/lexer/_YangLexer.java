/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.lang.yang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.yang.psi.YangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\6\4\0\1\7\2\0\1\5\1\20\1\0\1\40\1\12"+
    "\1\4\12\13\1\16\1\17\5\0\32\11\1\0\1\10\2\0\1\11\1\0\1\23\1\35\1\42\1\44\1"+
    "\22\1\24\1\32\1\43\1\41\1\11\1\47\1\21\1\31\1\26\1\37\1\45\1\51\1\25\1\36"+
    "\1\34\1\33\1\46\1\52\1\30\1\27\1\50\1\14\1\0\1\15\7\0\1\1\32\0\1\3\337\0\1"+
    "\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\25\6\1\15\1\16"+
    "\1\4\2\5\64\6\1\0\11\6\1\17\10\6\1\20"+
    "\5\6\1\21\2\6\1\22\10\6\1\23\31\6\1\24"+
    "\1\6\1\16\1\25\1\6\1\26\1\6\1\27\24\6"+
    "\1\30\6\6\1\31\1\32\1\33\1\34\1\6\1\35"+
    "\14\6\1\36\12\6\1\37\4\6\1\40\11\6\1\41"+
    "\6\6\1\42\13\6\1\43\14\6\1\44\17\6\1\45"+
    "\2\6\1\46\3\6\1\47\4\6\1\50\12\6\1\51"+
    "\3\6\1\52\2\6\1\53\1\6\1\54\2\6\1\55"+
    "\3\6\1\56\2\6\1\57\2\6\1\60\1\61\5\6"+
    "\1\62\2\6\1\63\5\6\1\64\1\65\2\6\1\66"+
    "\14\6\1\67\6\6\1\70\1\6\1\71\1\6\1\72"+
    "\1\73\2\6\1\74\1\6\1\75\6\6\1\76\2\6"+
    "\1\77\11\6\1\100\5\6\1\101\1\6\1\102\4\6"+
    "\1\103\1\104\1\105\2\6\1\106\1\6\1\107\2\6"+
    "\1\110\4\6\1\111\2\6\1\112\1\6\1\113\3\6"+
    "\1\114\2\6\1\115\13\6\1\116\1\6\1\117\1\120"+
    "\1\6\1\121\10\6\1\122\3\6\1\123\6\6\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\6\1\133"+
    "\1\6\1\134\2\6\1\135\1\6\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\53\0\53\0\53\0\53\0\53\0\u0158\0\u0183\0\u01ae"+
    "\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306"+
    "\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\53\0\53\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810"+
    "\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70"+
    "\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0102\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u0102\0\u1122"+
    "\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u0102\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af"+
    "\0\u17da\0\u1805\0\u0102\0\u1830\0\53\0\u185b\0\u1886\0\u0102"+
    "\0\u18b1\0\u0102\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u0102\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u0102\0\u0102\0\u0102"+
    "\0\u1d3a\0\u1d65\0\u0102\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c"+
    "\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u0102"+
    "\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1"+
    "\0\u20ec\0\u2117\0\u0102\0\u2142\0\u216d\0\u2198\0\u21c3\0\u0102"+
    "\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b"+
    "\0\u2346\0\u0102\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448"+
    "\0\u0102\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575"+
    "\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u0102\0\u264c\0\u2677\0\u26a2"+
    "\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa"+
    "\0\u2825\0\u0102\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927"+
    "\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f"+
    "\0\u2aaa\0\u0102\0\u2ad5\0\u2b00\0\u0102\0\u2b2b\0\u2b56\0\u2b81"+
    "\0\u0102\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u0102\0\u2c58\0\u2c83"+
    "\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb"+
    "\0\u0102\0\u2e06\0\u2e31\0\u2e5c\0\u0102\0\u2e87\0\u2eb2\0\u0102"+
    "\0\u2edd\0\u0102\0\u2f08\0\u2f33\0\u0102\0\u2f5e\0\u2f89\0\u2fb4"+
    "\0\u0102\0\u2fdf\0\u300a\0\u0102\0\u3035\0\u3060\0\u0102\0\u0102"+
    "\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u0102\0\u3162\0\u318d"+
    "\0\u0102\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u0102\0\u0102"+
    "\0\u328f\0\u32ba\0\u0102\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391"+
    "\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be\0\u0102"+
    "\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0\0\u0102\0\u35eb"+
    "\0\u0102\0\u3616\0\u0102\0\u0102\0\u3641\0\u366c\0\u0102\0\u3697"+
    "\0\u0102\0\u36c2\0\u36ed\0\u3718\0\u3743\0\u376e\0\u3799\0\u0102"+
    "\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870\0\u389b\0\u38c6\0\u38f1"+
    "\0\u391c\0\u3947\0\u3972\0\u399d\0\u0102\0\u39c8\0\u39f3\0\u3a1e"+
    "\0\u3a49\0\u3a74\0\u0102\0\u3a9f\0\u0102\0\u3aca\0\u3af5\0\u3b20"+
    "\0\u3b4b\0\u0102\0\u0102\0\u0102\0\u3b76\0\u3ba1\0\u0102\0\u3bcc"+
    "\0\u0102\0\u3bf7\0\u3c22\0\u0102\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce"+
    "\0\u0102\0\u3cf9\0\u3d24\0\u0102\0\u3d4f\0\u0102\0\u3d7a\0\u3da5"+
    "\0\u3dd0\0\u0102\0\u3dfb\0\u3e26\0\u0102\0\u3e51\0\u3e7c\0\u3ea7"+
    "\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff"+
    "\0\u0102\0\u402a\0\u0102\0\u0102\0\u4055\0\u0102\0\u4080\0\u40ab"+
    "\0\u40d6\0\u4101\0\u412c\0\u4157\0\u4182\0\u41ad\0\u0102\0\u41d8"+
    "\0\u4203\0\u422e\0\u0102\0\u4259\0\u4284\0\u42af\0\u42da\0\u4305"+
    "\0\u4330\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102"+
    "\0\u435b\0\u0102\0\u4386\0\u0102\0\u43b1\0\u43dc\0\u0102\0\u4407"+
    "\0\u0102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\7\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\2\1\34"+
    "\1\35\1\7\1\36\1\37\1\40\1\41\2\7\1\42"+
    "\54\0\3\3\53\0\1\43\1\44\45\0\6\5\1\45"+
    "\44\5\2\6\1\0\4\6\1\46\1\47\42\6\10\0"+
    "\4\7\5\0\32\7\11\0\1\10\1\0\1\10\5\0"+
    "\17\10\1\0\12\10\10\0\4\7\5\0\1\7\1\50"+
    "\16\7\1\51\11\7\10\0\4\7\5\0\4\7\1\52"+
    "\1\53\1\7\1\54\22\7\10\0\4\7\5\0\4\7"+
    "\1\55\1\56\4\7\1\57\10\7\1\60\6\7\10\0"+
    "\4\7\5\0\1\7\1\61\1\62\1\7\1\63\25\7"+
    "\10\0\4\7\5\0\1\7\1\64\1\65\21\7\1\66"+
    "\5\7\10\0\4\7\5\0\2\7\1\67\13\7\1\70"+
    "\13\7\10\0\4\7\5\0\2\7\1\71\15\7\1\72"+
    "\11\7\10\0\4\7\5\0\2\7\1\73\7\7\1\74"+
    "\3\7\1\75\1\7\1\76\11\7\10\0\4\7\5\0"+
    "\4\7\1\77\25\7\10\0\4\7\5\0\5\7\1\100"+
    "\7\7\1\101\14\7\10\0\4\7\5\0\4\7\1\102"+
    "\1\7\1\103\23\7\10\0\4\7\5\0\1\7\1\104"+
    "\1\105\15\7\1\106\11\7\10\0\4\7\5\0\6\7"+
    "\1\107\3\7\1\110\1\111\16\7\10\0\4\7\5\0"+
    "\4\7\1\112\5\7\1\113\1\7\1\114\15\7\10\0"+
    "\4\7\5\0\3\7\1\115\1\7\1\116\2\7\1\117"+
    "\12\7\1\120\6\7\10\0\4\7\5\0\2\7\1\121"+
    "\7\7\1\122\3\7\1\123\3\7\1\124\7\7\10\0"+
    "\4\7\5\0\1\7\1\125\30\7\10\0\4\7\5\0"+
    "\2\7\1\126\1\7\1\127\11\7\1\130\13\7\10\0"+
    "\4\7\5\0\2\7\1\131\27\7\10\0\4\7\5\0"+
    "\1\7\1\132\30\7\10\0\4\7\5\0\22\7\1\133"+
    "\7\7\1\43\2\0\50\43\5\44\1\134\45\44\2\6"+
    "\1\0\5\6\1\47\42\6\10\0\4\7\5\0\2\7"+
    "\1\135\2\7\1\136\24\7\10\0\4\7\5\0\15\7"+
    "\1\137\14\7\10\0\4\7\5\0\4\7\1\140\25\7"+
    "\10\0\4\7\5\0\12\7\1\141\17\7\10\0\4\7"+
    "\5\0\13\7\1\142\16\7\10\0\4\7\5\0\11\7"+
    "\1\143\20\7\10\0\4\7\5\0\6\7\1\144\23\7"+
    "\10\0\4\7\5\0\11\7\1\145\20\7\10\0\4\7"+
    "\5\0\23\7\1\146\6\7\10\0\4\7\5\0\2\7"+
    "\1\147\27\7\10\0\4\7\5\0\1\150\31\7\10\0"+
    "\4\7\5\0\2\7\1\151\27\7\10\0\4\7\5\0"+
    "\3\7\1\152\20\7\1\153\1\154\2\7\1\155\1\7"+
    "\10\0\4\7\5\0\5\7\1\156\24\7\10\0\4\7"+
    "\5\0\21\7\1\157\10\7\10\0\4\7\5\0\10\7"+
    "\1\160\21\7\10\0\4\7\5\0\13\7\1\161\16\7"+
    "\10\0\4\7\5\0\5\7\1\162\24\7\10\0\4\7"+
    "\5\0\5\7\1\163\24\7\10\0\4\7\5\0\5\7"+
    "\1\164\1\7\1\165\22\7\10\0\4\7\5\0\15\7"+
    "\1\166\14\7\10\0\4\7\5\0\23\7\1\167\6\7"+
    "\10\0\4\7\5\0\5\7\1\170\24\7\10\0\4\7"+
    "\5\0\16\7\1\171\13\7\10\0\4\7\5\0\14\7"+
    "\1\172\3\7\1\173\11\7\10\0\4\7\5\0\1\7"+
    "\1\174\30\7\10\0\4\7\5\0\12\7\1\175\17\7"+
    "\10\0\4\7\5\0\24\7\1\176\5\7\10\0\4\7"+
    "\5\0\1\177\31\7\10\0\4\7\5\0\15\7\1\200"+
    "\14\7\10\0\4\7\5\0\13\7\1\201\16\7\10\0"+
    "\4\7\5\0\15\7\1\202\14\7\10\0\4\7\5\0"+
    "\14\7\1\203\15\7\10\0\4\7\5\0\2\7\1\204"+
    "\27\7\10\0\4\7\5\0\11\7\1\205\11\7\1\206"+
    "\6\7\10\0\4\7\5\0\13\7\1\207\16\7\10\0"+
    "\4\7\5\0\15\7\1\210\14\7\10\0\4\7\5\0"+
    "\17\7\1\211\12\7\10\0\4\7\5\0\21\7\1\212"+
    "\2\7\1\213\5\7\10\0\4\7\5\0\24\7\1\214"+
    "\5\7\10\0\4\7\5\0\1\7\1\215\30\7\10\0"+
    "\4\7\5\0\15\7\1\216\14\7\10\0\4\7\5\0"+
    "\4\7\1\217\25\7\10\0\4\7\5\0\5\7\1\220"+
    "\24\7\10\0\4\7\5\0\16\7\1\221\13\7\10\0"+
    "\4\7\5\0\1\222\2\7\1\223\11\7\1\224\6\7"+
    "\1\225\1\226\4\7\10\0\4\7\5\0\13\7\1\227"+
    "\16\7\10\0\4\7\5\0\1\7\1\230\30\7\10\0"+
    "\4\7\5\0\15\7\1\231\14\7\10\0\4\7\5\0"+
    "\1\232\31\7\10\0\4\7\5\0\6\7\1\233\23\7"+
    "\10\0\4\7\5\0\1\7\1\234\30\7\4\44\1\235"+
    "\1\134\45\44\10\0\4\7\5\0\3\7\1\236\26\7"+
    "\10\0\4\7\5\0\11\7\1\237\20\7\10\0\4\7"+
    "\5\0\13\7\1\240\16\7\10\0\4\7\5\0\16\7"+
    "\1\241\13\7\10\0\4\7\5\0\10\7\1\242\21\7"+
    "\10\0\4\7\5\0\1\7\1\243\30\7\10\0\4\7"+
    "\5\0\12\7\1\244\17\7\10\0\4\7\5\0\7\7"+
    "\1\245\22\7\10\0\4\7\5\0\10\7\1\246\21\7"+
    "\10\0\4\7\5\0\13\7\1\247\16\7\10\0\4\7"+
    "\5\0\15\7\1\250\14\7\10\0\4\7\5\0\21\7"+
    "\1\251\10\7\10\0\4\7\5\0\1\7\1\252\16\7"+
    "\1\253\11\7\10\0\4\7\5\0\1\254\31\7\10\0"+
    "\4\7\5\0\20\7\1\255\11\7\10\0\4\7\5\0"+
    "\12\7\1\256\17\7\10\0\4\7\5\0\11\7\1\257"+
    "\20\7\10\0\4\7\5\0\1\7\1\260\30\7\10\0"+
    "\4\7\5\0\17\7\1\261\1\262\11\7\10\0\4\7"+
    "\5\0\11\7\1\263\20\7\10\0\4\7\5\0\17\7"+
    "\1\264\12\7\10\0\4\7\5\0\23\7\1\265\6\7"+
    "\10\0\4\7\5\0\17\7\1\266\12\7\10\0\4\7"+
    "\5\0\13\7\1\267\16\7\10\0\4\7\5\0\12\7"+
    "\1\270\17\7\10\0\4\7\5\0\17\7\1\271\12\7"+
    "\10\0\4\7\5\0\12\7\1\272\17\7\10\0\4\7"+
    "\5\0\16\7\1\273\13\7\10\0\4\7\5\0\13\7"+
    "\1\274\14\7\1\275\1\7\10\0\4\7\5\0\4\7"+
    "\1\276\10\7\1\277\14\7\10\0\4\7\5\0\1\7"+
    "\1\300\30\7\10\0\4\7\5\0\1\7\1\301\30\7"+
    "\10\0\4\7\5\0\16\7\1\302\13\7\10\0\4\7"+
    "\5\0\1\7\1\303\30\7\10\0\4\7\5\0\13\7"+
    "\1\304\16\7\10\0\4\7\5\0\10\7\1\305\21\7"+
    "\10\0\4\7\5\0\13\7\1\306\16\7\10\0\4\7"+
    "\5\0\2\7\1\307\27\7\10\0\4\7\5\0\1\7"+
    "\1\310\30\7\10\0\4\7\5\0\24\7\1\311\5\7"+
    "\10\0\4\7\5\0\16\7\1\312\13\7\10\0\4\7"+
    "\5\0\3\7\1\313\26\7\10\0\4\7\5\0\1\314"+
    "\31\7\10\0\4\7\5\0\12\7\1\315\17\7\10\0"+
    "\4\7\5\0\16\7\1\316\13\7\10\0\4\7\5\0"+
    "\5\7\1\317\24\7\10\0\4\7\5\0\1\7\1\320"+
    "\30\7\10\0\4\7\5\0\4\7\1\321\25\7\10\0"+
    "\4\7\5\0\3\7\1\322\7\7\1\323\16\7\10\0"+
    "\4\7\5\0\20\7\1\324\11\7\10\0\4\7\5\0"+
    "\1\7\1\325\30\7\10\0\4\7\5\0\2\7\1\326"+
    "\27\7\10\0\4\7\5\0\21\7\1\327\10\7\10\0"+
    "\4\7\5\0\4\7\1\330\25\7\10\0\4\7\5\0"+
    "\20\7\1\331\11\7\10\0\4\7\5\0\13\7\1\332"+
    "\6\7\1\333\7\7\10\0\4\7\5\0\3\7\1\334"+
    "\11\7\1\335\14\7\10\0\4\7\5\0\20\7\1\336"+
    "\11\7\10\0\4\7\5\0\12\7\1\337\17\7\10\0"+
    "\4\7\5\0\5\7\1\340\24\7\10\0\4\7\5\0"+
    "\4\7\1\341\12\7\1\342\12\7\10\0\4\7\5\0"+
    "\13\7\1\343\16\7\10\0\4\7\5\0\4\7\1\344"+
    "\25\7\10\0\4\7\5\0\5\7\1\345\24\7\10\0"+
    "\4\7\5\0\10\7\1\346\21\7\10\0\4\7\5\0"+
    "\10\7\1\347\21\7\10\0\4\7\5\0\1\7\1\350"+
    "\30\7\10\0\4\7\5\0\12\7\1\351\17\7\10\0"+
    "\4\7\5\0\1\7\1\352\30\7\10\0\4\7\5\0"+
    "\13\7\1\353\16\7\10\0\4\7\5\0\4\7\1\354"+
    "\25\7\10\0\4\7\5\0\5\7\1\355\24\7\10\0"+
    "\4\7\5\0\2\7\1\356\27\7\10\0\4\7\5\0"+
    "\15\7\1\357\14\7\10\0\4\7\5\0\20\7\1\360"+
    "\11\7\10\0\4\7\5\0\1\7\1\361\30\7\10\0"+
    "\4\7\5\0\15\7\1\362\14\7\10\0\4\7\5\0"+
    "\15\7\1\363\14\7\10\0\4\7\5\0\3\7\1\364"+
    "\26\7\10\0\4\7\5\0\17\7\1\365\12\7\10\0"+
    "\4\7\5\0\1\7\1\366\30\7\10\0\4\7\5\0"+
    "\2\7\1\367\27\7\10\0\4\7\5\0\1\7\1\370"+
    "\30\7\10\0\4\7\5\0\1\371\31\7\10\0\4\7"+
    "\5\0\1\7\1\372\30\7\10\0\4\7\5\0\24\7"+
    "\1\373\5\7\10\0\4\7\5\0\12\7\1\374\17\7"+
    "\10\0\4\7\5\0\15\7\1\375\14\7\10\0\4\7"+
    "\5\0\12\7\1\376\17\7\10\0\4\7\5\0\23\7"+
    "\1\377\6\7\10\0\4\7\5\0\5\7\1\u0100\24\7"+
    "\10\0\4\7\5\0\1\7\1\u0101\30\7\10\0\4\7"+
    "\5\0\16\7\1\u0102\13\7\10\0\4\7\5\0\12\7"+
    "\1\u0103\17\7\10\0\4\7\5\0\5\7\1\u0104\24\7"+
    "\10\0\4\7\5\0\4\7\1\u0105\25\7\10\0\4\7"+
    "\5\0\12\7\1\u0106\17\7\10\0\4\7\5\0\1\u0107"+
    "\31\7\10\0\4\7\5\0\1\7\1\u0108\30\7\10\0"+
    "\4\7\5\0\12\7\1\u0109\17\7\10\0\4\7\5\0"+
    "\13\7\1\u010a\16\7\10\0\4\7\5\0\4\7\1\u010b"+
    "\25\7\10\0\4\7\5\0\13\7\1\u010c\16\7\10\0"+
    "\4\7\5\0\1\7\1\u010d\30\7\10\0\4\7\5\0"+
    "\20\7\1\u010e\11\7\10\0\4\7\5\0\2\7\1\u010f"+
    "\27\7\10\0\4\7\5\0\21\7\1\u0110\10\7\10\0"+
    "\4\7\5\0\13\7\1\u0111\16\7\10\0\4\7\5\0"+
    "\12\7\1\u0112\17\7\10\0\4\7\5\0\4\7\1\u0113"+
    "\25\7\10\0\4\7\5\0\1\7\1\u0114\30\7\10\0"+
    "\4\7\5\0\2\7\1\u0115\27\7\10\0\4\7\5\0"+
    "\1\7\1\u0116\30\7\10\0\4\7\5\0\20\7\1\u0117"+
    "\11\7\10\0\4\7\5\0\1\7\1\u0118\30\7\10\0"+
    "\4\7\5\0\13\7\1\u0119\16\7\10\0\4\7\5\0"+
    "\1\7\1\u011a\30\7\10\0\4\7\5\0\1\7\1\u011b"+
    "\30\7\10\0\4\7\5\0\1\u011c\31\7\10\0\4\7"+
    "\5\0\22\7\1\u011d\7\7\10\0\4\7\5\0\17\7"+
    "\1\u011e\12\7\10\0\4\7\5\0\15\7\1\u011f\14\7"+
    "\10\0\4\7\5\0\1\7\1\u0120\30\7\10\0\4\7"+
    "\5\0\1\u0121\31\7\10\0\4\7\5\0\5\7\1\u0122"+
    "\24\7\10\0\4\7\5\0\4\7\1\u0123\25\7\10\0"+
    "\4\7\5\0\20\7\1\u0124\11\7\10\0\4\7\5\0"+
    "\1\7\1\u0125\30\7\10\0\4\7\5\0\1\7\1\u0126"+
    "\30\7\10\0\4\7\5\0\21\7\1\u0127\10\7\10\0"+
    "\4\7\5\0\20\7\1\u0128\11\7\10\0\4\7\5\0"+
    "\4\7\1\u0129\25\7\10\0\4\7\5\0\24\7\1\u012a"+
    "\5\7\10\0\4\7\5\0\12\7\1\u012b\17\7\10\0"+
    "\4\7\5\0\20\7\1\u012c\11\7\10\0\4\7\5\0"+
    "\25\7\1\u012d\4\7\10\0\4\7\5\0\1\u012e\31\7"+
    "\10\0\4\7\5\0\13\7\1\u012f\16\7\10\0\4\7"+
    "\5\0\1\u0130\31\7\10\0\4\7\5\0\1\7\1\u0131"+
    "\30\7\10\0\4\7\5\0\1\u0132\31\7\10\0\4\7"+
    "\5\0\20\7\1\u0133\11\7\10\0\4\7\5\0\5\7"+
    "\1\u0134\24\7\10\0\4\7\5\0\1\7\1\u0135\30\7"+
    "\10\0\4\7\5\0\1\7\1\u0136\30\7\10\0\4\7"+
    "\5\0\11\7\1\u0137\20\7\10\0\4\7\5\0\10\7"+
    "\1\u0138\21\7\10\0\4\7\5\0\23\7\1\u0139\6\7"+
    "\10\0\4\7\5\0\15\7\1\u013a\14\7\10\0\4\7"+
    "\5\0\20\7\1\u013b\11\7\10\0\4\7\5\0\1\7"+
    "\1\u013c\30\7\10\0\4\7\5\0\13\7\1\u013d\16\7"+
    "\10\0\4\7\5\0\1\7\1\u013e\30\7\10\0\4\7"+
    "\5\0\2\7\1\u013f\27\7\10\0\4\7\5\0\23\7"+
    "\1\u0140\6\7\10\0\4\7\5\0\13\7\1\u0141\16\7"+
    "\10\0\4\7\5\0\20\7\1\u0142\11\7\10\0\4\7"+
    "\5\0\5\7\1\u0143\24\7\10\0\4\7\5\0\11\7"+
    "\1\u0144\20\7\10\0\4\7\5\0\20\7\1\u0145\1\u0146"+
    "\10\7\10\0\4\7\5\0\1\7\1\u0147\30\7\10\0"+
    "\4\7\5\0\1\7\1\u0148\30\7\10\0\4\7\5\0"+
    "\1\u0149\31\7\10\0\4\7\5\0\20\7\1\u014a\11\7"+
    "\10\0\4\7\5\0\21\7\1\u014b\10\7\10\0\4\7"+
    "\5\0\13\7\1\u014c\16\7\10\0\4\7\5\0\4\7"+
    "\1\u014d\25\7\10\0\4\7\5\0\7\7\1\u014e\22\7"+
    "\10\0\4\7\5\0\5\7\1\u014f\24\7\10\0\4\7"+
    "\5\0\20\7\1\u0150\11\7\10\0\4\7\5\0\3\7"+
    "\1\u0151\26\7\10\0\4\7\5\0\20\7\1\u0152\11\7"+
    "\10\0\4\7\5\0\2\7\1\u0153\5\7\1\u0154\21\7"+
    "\10\0\4\7\5\0\20\7\1\u0155\11\7\10\0\4\7"+
    "\5\0\5\7\1\u0156\24\7\10\0\4\7\5\0\13\7"+
    "\1\u0157\16\7\10\0\4\7\5\0\1\7\1\u0158\30\7"+
    "\10\0\4\7\5\0\16\7\1\u0159\13\7\10\0\4\7"+
    "\5\0\5\7\1\u015a\24\7\10\0\4\7\5\0\1\7"+
    "\1\u015b\30\7\10\0\4\7\5\0\16\7\1\u015c\13\7"+
    "\10\0\4\7\5\0\1\7\1\u015d\30\7\10\0\4\7"+
    "\5\0\2\7\1\u015e\27\7\10\0\4\7\5\0\24\7"+
    "\1\u015f\5\7\10\0\4\7\5\0\21\7\1\u0160\10\7"+
    "\10\0\4\7\5\0\1\7\1\u0161\30\7\10\0\4\7"+
    "\5\0\1\7\1\u0162\30\7\10\0\4\7\5\0\16\7"+
    "\1\u0163\13\7\10\0\4\7\5\0\1\7\1\u0164\30\7"+
    "\10\0\4\7\5\0\1\7\1\u0165\30\7\10\0\4\7"+
    "\5\0\5\7\1\u0166\24\7\10\0\4\7\5\0\23\7"+
    "\1\u0167\6\7\10\0\4\7\5\0\3\7\1\u0168\26\7"+
    "\10\0\4\7\5\0\15\7\1\u0169\14\7\10\0\4\7"+
    "\5\0\12\7\1\u016a\17\7\10\0\4\7\5\0\27\7"+
    "\1\u016b\2\7\10\0\4\7\5\0\23\7\1\u016c\6\7"+
    "\10\0\4\7\5\0\13\7\1\u016d\16\7\10\0\4\7"+
    "\5\0\13\7\1\u016e\16\7\10\0\4\7\5\0\1\7"+
    "\1\u016f\30\7\10\0\4\7\5\0\13\7\1\u0170\16\7"+
    "\10\0\4\7\5\0\13\7\1\u0171\16\7\10\0\4\7"+
    "\5\0\5\7\1\u0172\24\7\10\0\4\7\5\0\13\7"+
    "\1\u0173\16\7\10\0\4\7\5\0\13\7\1\u0174\16\7"+
    "\10\0\4\7\5\0\24\7\1\u0175\5\7\10\0\4\7"+
    "\5\0\2\7\1\u0176\27\7\10\0\4\7\5\0\1\7"+
    "\1\u0177\16\7\1\u0178\11\7\10\0\4\7\5\0\5\7"+
    "\1\u0179\24\7\10\0\4\7\5\0\21\7\1\u017a\10\7"+
    "\10\0\4\7\5\0\16\7\1\u017b\13\7\10\0\4\7"+
    "\5\0\15\7\1\u017c\14\7\10\0\4\7\5\0\24\7"+
    "\1\u017d\5\7\10\0\4\7\5\0\1\7\1\u017e\30\7"+
    "\10\0\4\7\5\0\16\7\1\u017f\13\7\10\0\4\7"+
    "\5\0\13\7\1\u0180\16\7\10\0\4\7\5\0\5\7"+
    "\1\u0181\24\7\10\0\4\7\5\0\21\7\1\u0182\10\7"+
    "\10\0\4\7\5\0\5\7\1\u0183\24\7\10\0\4\7"+
    "\5\0\17\7\1\u0184\12\7\10\0\4\7\5\0\21\7"+
    "\1\u0185\10\7\10\0\4\7\5\0\24\7\1\u0186\5\7"+
    "\10\0\4\7\5\0\2\7\1\u0187\27\7\10\0\4\7"+
    "\5\0\4\7\1\u0188\25\7\10\0\4\7\5\0\10\7"+
    "\1\u0189\21\7\10\0\4\7\5\0\4\7\1\u018a\25\7"+
    "\10\0\4\7\5\0\10\7\1\u018b\21\7\10\0\4\7"+
    "\5\0\10\7\1\u018c\21\7\10\0\4\7\5\0\11\7"+
    "\1\u018d\20\7\10\0\4\7\5\0\1\7\1\u018e\30\7"+
    "\10\0\4\7\5\0\17\7\1\u018f\12\7\10\0\4\7"+
    "\5\0\1\u0190\31\7\10\0\4\7\5\0\2\7\1\u0191"+
    "\27\7\10\0\4\7\5\0\17\7\1\u0192\12\7\10\0"+
    "\4\7\5\0\1\7\1\u0193\30\7\10\0\4\7\5\0"+
    "\12\7\1\u0194\17\7\10\0\4\7\5\0\6\7\1\u0195"+
    "\23\7\10\0\4\7\5\0\1\7\1\u0196\30\7\10\0"+
    "\4\7\5\0\13\7\1\u0197\16\7\10\0\4\7\5\0"+
    "\13\7\1\u0198\16\7\10\0\4\7\5\0\16\7\1\u0199"+
    "\13\7\10\0\4\7\5\0\1\7\1\u019a\30\7\10\0"+
    "\4\7\5\0\5\7\1\u019b\24\7\10\0\4\7\5\0"+
    "\13\7\1\u019c\16\7\10\0\4\7\5\0\24\7\1\u019d"+
    "\5\7\10\0\4\7\5\0\15\7\1\u019e\14\7\10\0"+
    "\4\7\5\0\5\7\1\u019f\24\7\10\0\4\7\5\0"+
    "\17\7\1\u01a0\12\7\10\0\4\7\5\0\1\7\1\u01a1"+
    "\30\7\10\0\4\7\5\0\17\7\1\u01a2\12\7\10\0"+
    "\4\7\5\0\20\7\1\u01a3\11\7\10\0\4\7\5\0"+
    "\1\7\1\u01a4\30\7\10\0\4\7\5\0\16\7\1\u01a5"+
    "\13\7\10\0\4\7\5\0\13\7\1\u01a6\16\7\10\0"+
    "\4\7\5\0\15\7\1\u01a7\14\7\10\0\4\7\5\0"+
    "\1\7\1\u01a8\30\7\10\0\4\7\5\0\6\7\1\u01a9"+
    "\23\7\10\0\4\7\5\0\1\7\1\u01aa\30\7\10\0"+
    "\4\7\5\0\1\7\1\u01ab\30\7\10\0\4\7\5\0"+
    "\23\7\1\u01ac\6\7\10\0\4\7\5\0\13\7\1\u01ad"+
    "\16\7\10\0\4\7\5\0\1\7\1\u01ae\30\7\10\0"+
    "\4\7\5\0\13\7\1\u01af\16\7\10\0\4\7\5\0"+
    "\14\7\1\u01b0\15\7\10\0\4\7\5\0\4\7\1\u01b1"+
    "\25\7\10\0\4\7\5\0\4\7\1\u01b2\25\7\10\0"+
    "\4\7\5\0\20\7\1\u01b3\11\7\10\0\4\7\5\0"+
    "\1\7\1\u01b4\30\7\10\0\4\7\5\0\5\7\1\u01b5"+
    "\24\7\10\0\4\7\5\0\17\7\1\u01b6\12\7\10\0"+
    "\4\7\5\0\15\7\1\u01b7\14\7\10\0\4\7\5\0"+
    "\23\7\1\u01b8\6\7\10\0\4\7\5\0\23\7\1\u01b9"+
    "\6\7\10\0\4\7\5\0\5\7\1\u01ba\24\7\10\0"+
    "\4\7\5\0\4\7\1\u01bb\25\7\10\0\4\7\5\0"+
    "\20\7\1\u01bc\11\7\10\0\4\7\5\0\20\7\1\u01bd"+
    "\11\7\10\0\4\7\5\0\5\7\1\u01be\24\7\10\0"+
    "\4\7\5\0\5\7\1\u01bf\24\7\10\0\4\7\5\0"+
    "\5\7\1\u01c0\24\7\10\0\4\7\5\0\16\7\1\u01c1"+
    "\13\7\10\0\4\7\5\0\20\7\1\u01c2\11\7\10\0"+
    "\4\7\5\0\6\7\1\u01c3\23\7\10\0\4\7\5\0"+
    "\1\7\1\u01c4\30\7\10\0\4\7\5\0\16\7\1\u01c5"+
    "\13\7\10\0\4\7\5\0\23\7\1\u01c6\6\7\10\0"+
    "\4\7\5\0\13\7\1\u01c7\16\7\10\0\4\7\5\0"+
    "\2\7\1\u01c8\27\7\10\0\4\7\5\0\20\7\1\u01c9"+
    "\11\7\10\0\4\7\5\0\2\7\1\u01ca\27\7\10\0"+
    "\4\7\5\0\15\7\1\u01cb\14\7\10\0\4\7\5\0"+
    "\13\7\1\u01cc\16\7\10\0\4\7\5\0\16\7\1\u01cd"+
    "\13\7\10\0\4\7\5\0\16\7\1\u01ce\13\7\10\0"+
    "\4\7\5\0\13\7\1\u01cf\16\7\10\0\4\7\5\0"+
    "\13\7\1\u01d0\16\7\10\0\4\7\5\0\13\7\1\u01d1"+
    "\16\7\10\0\4\7\5\0\16\7\1\u01d2\13\7\10\0"+
    "\4\7\5\0\5\7\1\u01d3\24\7\10\0\4\7\5\0"+
    "\2\7\1\u01d4\27\7\10\0\4\7\5\0\11\7\1\u01d5"+
    "\20\7\10\0\4\7\5\0\11\7\1\u01d6\20\7\10\0"+
    "\4\7\5\0\13\7\1\u01d7\16\7\10\0\4\7\5\0"+
    "\13\7\1\u01d8\16\7\10\0\4\7\5\0\1\7\1\u01d9"+
    "\30\7\10\0\4\7\5\0\5\7\1\u01da\24\7\10\0"+
    "\4\7\5\0\5\7\1\u01db\24\7\10\0\4\7\5\0"+
    "\15\7\1\u01dc\14\7\10\0\4\7\5\0\15\7\1\u01dd"+
    "\14\7\10\0\4\7\5\0\5\7\1\u01de\24\7\10\0"+
    "\4\7\5\0\11\7\1\u01df\20\7\10\0\4\7\5\0"+
    "\1\7\1\u01e0\30\7\10\0\4\7\5\0\20\7\1\u01e1"+
    "\11\7\10\0\4\7\5\0\1\7\1\u01e2\30\7\10\0"+
    "\4\7\5\0\2\7\1\u01e3\27\7\10\0\4\7\5\0"+
    "\23\7\1\u01e4\6\7\10\0\4\7\5\0\13\7\1\u01e5"+
    "\16\7\10\0\4\7\5\0\5\7\1\u01e6\24\7\10\0"+
    "\4\7\5\0\15\7\1\u01e7\14\7\10\0\4\7\5\0"+
    "\21\7\1\u01e8\10\7\10\0\4\7\5\0\1\7\1\u01e9"+
    "\30\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17458];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\27\1\2\11\65\1\1\0"+
    "\100\1\1\11\u014c\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 95: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 96: break;
          case 3: 
            { return YANG_SLASH;
            } 
            // fall through
          case 97: break;
          case 4: 
            { return YANG_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 98: break;
          case 5: 
            { return YANG_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 99: break;
          case 6: 
            { return YANG_IDENTIFIER;
            } 
            // fall through
          case 100: break;
          case 7: 
            { return YANG_UNQUOTED_STRING;
            } 
            // fall through
          case 101: break;
          case 8: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 102: break;
          case 9: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 103: break;
          case 10: 
            { return YANG_COLON;
            } 
            // fall through
          case 104: break;
          case 11: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 105: break;
          case 12: 
            { return YANG_PLUS;
            } 
            // fall through
          case 106: break;
          case 13: 
            { return YANG_LINE_COMMENT;
            } 
            // fall through
          case 107: break;
          case 14: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 108: break;
          case 15: 
            { return YANG_ADD_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 16: 
            { return YANG_RPC_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 17: 
            { return YANG_MAX_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 18: 
            { return YANG_MIN_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 19: 
            { return YANG_BIT_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 20: 
            { return YANG_KEY_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 21: 
            { return YANG_LEAF_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 22: 
            { return YANG_LIST_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 23: 
            { return YANG_ENUM_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 24: 
            { return YANG_MUST_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 25: 
            { return YANG_USER_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 26: 
            { return YANG_USES_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 27: 
            { return YANG_TRUE_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 28: 
            { return YANG_TYPE_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 29: 
            { return YANG_BASE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 30: 
            { return YANG_CASE_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 31: 
            { return YANG_PATH_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 32: 
            { return YANG_WHEN_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 33: 
            { return YANG_FALSE_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 34: 
            { return YANG_RANGE_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 35: 
            { return YANG_UNITS_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 36: 
            { return YANG_INPUT_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 37: 
            { return YANG_VALUE_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 38: 
            { return YANG_LENGTH_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 39: 
            { return YANG_ANYXML_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 40: 
            { return YANG_REFINE_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 41: 
            { return YANG_MODULE_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 42: 
            { return YANG_UNIQUE_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 43: 
            { return YANG_SYSTEM_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 44: 
            { return YANG_STATUS_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 45: 
            { return YANG_OUTPUT_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 46: 
            { return YANG_IMPORT_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 47: 
            { return YANG_CONFIG_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 48: 
            { return YANG_CHOICE_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 49: 
            { return YANG_DELETE_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 50: 
            { return YANG_PREFIX_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 51: 
            { return YANG_LEAFREF_TYPE;
            } 
            // fall through
          case 145: break;
          case 52: 
            { return YANG_AUGMENT_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 53: 
            { return YANG_FEATURE_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 54: 
            { return YANG_REPLACE_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 55: 
            { return YANG_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 56: 
            { return YANG_INCLUDE_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 57: 
            { return YANG_CURRENT_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 58: 
            { return YANG_CONTACT_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 59: 
            { return YANG_DEFAULT_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 60: 
            { return YANG_DEVIATE_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 61: 
            { return YANG_PATTERN_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 62: 
            { return YANG_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 63: 
            { return YANG_REVISION_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 64: 
            { return YANG_GROUPING_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 65: 
            { return YANG_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 66: 
            { return YANG_IDENTITY_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 67: 
            { return YANG_PRESENCE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 68: 
            { return YANG_POSITION_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 69: 
            { return YANG_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 70: 
            { return YANG_EXTENSION_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 71: 
            { return YANG_REFERENCE_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 72: 
            { return YANG_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 73: 
            { return YANG_MANDATORY_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 74: 
            { return YANG_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 75: 
            { return YANG_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 76: 
            { return YANG_CONTAINER_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 77: 
            { return YANG_DEVIATION_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 78: 
            { return YANG_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 79: 
            { return YANG_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 80: 
            { return YANG_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 81: 
            { return YANG_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 82: 
            { return YANG_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 83: 
            { return YANG_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 84: 
            { return YANG_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 85: 
            { return YANG_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 86: 
            { return YANG_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 87: 
            { return YANG_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 88: 
            { return YANG_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 89: 
            { return YANG_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 90: 
            { return YANG_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 91: 
            { return YANG_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 92: 
            { return YANG_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 93: 
            { return YANG_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 94: 
            { return YANG_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
