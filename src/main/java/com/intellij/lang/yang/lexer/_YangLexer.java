/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.lang.yang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.yang.psi.YangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\6\4\0\1\10\2\0\1\5\1\16\1\0\1\35\1\11"+
    "\1\4\12\11\1\12\1\15\5\0\32\11\1\0\1\7\2\0\1\11\1\0\1\17\1\32\1\37\1\42\1"+
    "\30\1\41\1\26\1\40\1\36\1\11\1\45\1\24\1\23\1\20\1\34\1\43\1\47\1\25\1\33"+
    "\1\31\1\27\1\44\1\50\1\22\1\21\1\46\1\13\1\0\1\14\7\0\1\1\32\0\1\3\337\0\1"+
    "\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\25\3\1\12\1\13\1\4\1\0"+
    "\1\5\64\3\1\0\3\3\1\14\5\3\1\15\2\3"+
    "\1\16\10\3\1\17\13\3\1\20\34\3\1\21\1\3"+
    "\1\13\12\3\1\22\2\3\1\23\1\3\1\24\12\3"+
    "\1\25\1\26\1\27\2\3\1\30\1\31\1\32\15\3"+
    "\1\33\15\3\1\34\4\3\1\35\16\3\1\36\7\3"+
    "\1\37\15\3\1\40\7\3\1\41\13\3\1\42\1\43"+
    "\11\3\1\44\2\3\1\45\1\3\1\46\5\3\1\47"+
    "\4\3\1\50\1\3\1\51\2\3\1\52\2\3\1\53"+
    "\5\3\1\54\1\55\2\3\1\56\6\3\1\57\2\3"+
    "\1\60\12\3\1\61\7\3\1\62\5\3\1\63\2\3"+
    "\1\64\1\3\1\65\1\3\1\66\1\3\1\67\1\3"+
    "\1\70\1\3\1\71\2\3\1\72\12\3\1\73\1\3"+
    "\1\74\10\3\1\75\1\3\1\76\5\3\1\77\1\100"+
    "\1\101\4\3\1\102\2\3\1\103\1\104\2\3\1\105"+
    "\1\106\3\3\1\107\3\3\1\110\3\3\1\111\12\3"+
    "\1\112\1\3\1\113\1\114\2\3\1\115\3\3\1\116"+
    "\10\3\1\117\1\3\1\120\1\121\1\122\1\123\4\3"+
    "\1\124\1\3\1\125\1\126\1\3\1\127\1\130\4\3"+
    "\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\51"+
    "\0\51\0\51\0\51\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3"+
    "\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\51\0\u04ce\0\51\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9"+
    "\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\366\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\366"+
    "\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7"+
    "\0\u11f0\0\u1219\0\u1242\0\366\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e"+
    "\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576"+
    "\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be"+
    "\0\366\0\u16e7\0\51\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4"+
    "\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881\0\366\0\u18aa\0\u18d3"+
    "\0\u18fc\0\u1925\0\366\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2"+
    "\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\366\0\366\0\366"+
    "\0\u1ae8\0\u1b11\0\u1b3a\0\366\0\366\0\u1b63\0\u1b8c\0\u1bb5"+
    "\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd"+
    "\0\u1d26\0\u1d4f\0\366\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\366\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\366\0\u2031\0\u205a"+
    "\0\u2083\0\u20ac\0\u20d5\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2"+
    "\0\u21cb\0\u21f4\0\u221d\0\u2246\0\366\0\u226f\0\u2298\0\u22c1"+
    "\0\u22ea\0\u2313\0\u233c\0\u2365\0\366\0\u238e\0\u23b7\0\u23e0"+
    "\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528"+
    "\0\u2551\0\u257a\0\366\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647"+
    "\0\u2670\0\u2699\0\366\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766"+
    "\0\u278f\0\u27b8\0\u27e1\0\u280a\0\u2833\0\u285c\0\366\0\366"+
    "\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\u2952\0\u297b\0\u29a4"+
    "\0\u29cd\0\366\0\u29f6\0\u2a1f\0\366\0\u2a48\0\366\0\u2a71"+
    "\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\366\0\u2b3e\0\u2b67\0\u2b90"+
    "\0\u2bb9\0\366\0\u2be2\0\366\0\u2c0b\0\u2c34\0\366\0\u2c5d"+
    "\0\u2c86\0\366\0\u2caf\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53\0\366"+
    "\0\366\0\u2d7c\0\u2da5\0\366\0\u2dce\0\u2df7\0\u2e20\0\u2e49"+
    "\0\u2e72\0\u2e9b\0\366\0\u2ec4\0\u2eed\0\366\0\u2f16\0\u2f3f"+
    "\0\u2f68\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087"+
    "\0\366\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6"+
    "\0\366\0\u31cf\0\u31f8\0\u3221\0\u324a\0\u3273\0\366\0\u329c"+
    "\0\u32c5\0\366\0\u32ee\0\366\0\u3317\0\366\0\u3340\0\366"+
    "\0\u3369\0\366\0\u3392\0\366\0\u33bb\0\u33e4\0\366\0\u340d"+
    "\0\u3436\0\u345f\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555"+
    "\0\u357e\0\u35a7\0\u35d0\0\366\0\u35f9\0\u3622\0\u364b\0\u3674"+
    "\0\u369d\0\u36c6\0\u36ef\0\u3718\0\366\0\u3741\0\366\0\u376a"+
    "\0\u3793\0\u37bc\0\u37e5\0\u380e\0\366\0\366\0\366\0\u3837"+
    "\0\u3860\0\u3889\0\u38b2\0\366\0\u38db\0\u3904\0\366\0\366"+
    "\0\u392d\0\u3956\0\366\0\366\0\u397f\0\u39a8\0\u39d1\0\366"+
    "\0\u39fa\0\u3a23\0\u3a4c\0\366\0\u3a75\0\u3a9e\0\u3ac7\0\366"+
    "\0\u3af0\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd\0\u3be6\0\u3c0f"+
    "\0\u3c38\0\u3c61\0\366\0\u3c8a\0\366\0\366\0\u3cb3\0\u3cdc"+
    "\0\366\0\u3d05\0\u3d2e\0\u3d57\0\366\0\u3d80\0\u3da9\0\u3dd2"+
    "\0\u3dfb\0\u3e24\0\u3e4d\0\u3e76\0\u3e9f\0\366\0\u3ec8\0\366"+
    "\0\366\0\366\0\366\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\366"+
    "\0\u3f95\0\366\0\366\0\u3fbe\0\366\0\366\0\u3fe7\0\u4010"+
    "\0\u4039\0\u4062\0\366\0\366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\7\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\7\1\31\1\32\1\7\1\33"+
    "\1\34\1\35\1\36\1\37\2\7\1\40\52\0\3\3"+
    "\51\0\1\41\1\42\3\0\2\7\4\0\32\7\6\5"+
    "\1\43\1\0\41\5\2\6\1\0\4\6\1\44\1\45"+
    "\40\6\11\0\2\7\4\0\32\7\11\0\2\7\4\0"+
    "\1\7\1\46\4\7\1\47\1\7\1\50\12\7\1\51"+
    "\6\7\11\0\2\7\4\0\1\52\14\7\1\53\14\7"+
    "\11\0\2\7\4\0\1\54\16\7\1\55\12\7\11\0"+
    "\2\7\4\0\1\56\7\7\1\57\4\7\1\60\1\7"+
    "\1\61\12\7\11\0\2\7\4\0\11\7\1\62\5\7"+
    "\1\63\12\7\11\0\2\7\4\0\1\64\10\7\1\65"+
    "\12\7\1\66\5\7\11\0\2\7\4\0\6\7\1\67"+
    "\23\7\11\0\2\7\4\0\1\7\1\70\12\7\1\71"+
    "\15\7\11\0\2\7\4\0\1\7\1\72\1\7\1\73"+
    "\2\7\1\74\23\7\11\0\2\7\4\0\2\7\1\75"+
    "\3\7\1\76\23\7\11\0\2\7\4\0\1\77\10\7"+
    "\1\100\5\7\1\101\12\7\11\0\2\7\4\0\2\7"+
    "\1\102\5\7\1\103\1\7\1\104\17\7\11\0\2\7"+
    "\4\0\6\7\1\105\1\7\1\106\2\7\1\107\16\7"+
    "\11\0\2\7\4\0\1\7\1\110\2\7\1\111\15\7"+
    "\1\112\1\113\6\7\11\0\2\7\4\0\1\114\7\7"+
    "\1\115\4\7\1\116\3\7\1\117\10\7\11\0\2\7"+
    "\4\0\1\120\5\7\1\121\2\7\1\122\20\7\11\0"+
    "\2\7\4\0\11\7\1\123\20\7\11\0\2\7\4\0"+
    "\1\124\5\7\1\125\6\7\1\126\14\7\11\0\2\7"+
    "\4\0\1\127\31\7\11\0\2\7\4\0\11\7\1\130"+
    "\20\7\11\0\2\7\4\0\21\7\1\131\10\7\1\41"+
    "\2\0\46\41\5\42\1\132\43\42\2\6\1\0\46\6"+
    "\11\0\2\7\4\0\2\7\1\133\27\7\11\0\2\7"+
    "\4\0\7\7\1\134\22\7\11\0\2\7\4\0\7\7"+
    "\1\135\22\7\11\0\2\7\4\0\23\7\1\136\6\7"+
    "\11\0\2\7\4\0\4\7\1\137\25\7\11\0\2\7"+
    "\4\0\12\7\1\140\17\7\11\0\2\7\4\0\1\7"+
    "\1\141\30\7\11\0\2\7\4\0\1\7\1\142\30\7"+
    "\11\0\2\7\4\0\1\7\1\143\1\7\1\144\26\7"+
    "\11\0\2\7\4\0\14\7\1\145\15\7\11\0\2\7"+
    "\4\0\23\7\1\146\6\7\11\0\2\7\4\0\1\7"+
    "\1\147\30\7\11\0\2\7\4\0\1\150\1\151\30\7"+
    "\11\0\2\7\4\0\14\7\1\152\15\7\11\0\2\7"+
    "\4\0\1\7\1\153\30\7\11\0\2\7\4\0\22\7"+
    "\1\154\1\7\1\155\1\156\2\7\1\157\1\7\11\0"+
    "\2\7\4\0\20\7\1\160\11\7\11\0\2\7\4\0"+
    "\15\7\1\161\14\7\11\0\2\7\4\0\13\7\1\162"+
    "\3\7\1\163\12\7\11\0\2\7\4\0\11\7\1\164"+
    "\20\7\11\0\2\7\4\0\10\7\1\165\21\7\11\0"+
    "\2\7\4\0\12\7\1\166\17\7\11\0\2\7\4\0"+
    "\6\7\1\167\23\7\11\0\2\7\4\0\24\7\1\170"+
    "\5\7\11\0\2\7\4\0\10\7\1\171\21\7\11\0"+
    "\2\7\4\0\14\7\1\172\15\7\11\0\2\7\4\0"+
    "\5\7\1\173\24\7\11\0\2\7\4\0\12\7\1\174"+
    "\17\7\11\0\2\7\4\0\14\7\1\175\15\7\11\0"+
    "\2\7\4\0\13\7\1\176\16\7\11\0\2\7\4\0"+
    "\1\177\31\7\11\0\2\7\4\0\7\7\1\200\13\7"+
    "\1\201\6\7\11\0\2\7\4\0\12\7\1\202\17\7"+
    "\11\0\2\7\4\0\14\7\1\203\15\7\11\0\2\7"+
    "\4\0\20\7\1\204\3\7\1\205\5\7\11\0\2\7"+
    "\4\0\24\7\1\206\5\7\11\0\2\7\4\0\16\7"+
    "\1\207\13\7\11\0\2\7\4\0\11\7\1\210\20\7"+
    "\11\0\2\7\4\0\14\7\1\211\15\7\11\0\2\7"+
    "\4\0\6\7\1\212\23\7\11\0\2\7\4\0\1\7"+
    "\1\213\30\7\11\0\2\7\4\0\15\7\1\214\14\7"+
    "\11\0\2\7\4\0\5\7\1\215\24\7\11\0\2\7"+
    "\4\0\1\216\31\7\11\0\2\7\4\0\1\217\31\7"+
    "\11\0\2\7\4\0\5\7\1\220\6\7\1\221\5\7"+
    "\1\222\1\7\1\223\1\224\4\7\11\0\2\7\4\0"+
    "\12\7\1\225\17\7\11\0\2\7\4\0\11\7\1\226"+
    "\20\7\11\0\2\7\4\0\14\7\1\227\15\7\11\0"+
    "\2\7\4\0\5\7\1\230\24\7\11\0\2\7\4\0"+
    "\2\7\1\231\27\7\11\0\2\7\4\0\11\7\1\232"+
    "\20\7\4\42\1\233\1\132\43\42\11\0\2\7\4\0"+
    "\3\7\1\234\26\7\11\0\2\7\4\0\10\7\1\235"+
    "\21\7\11\0\2\7\4\0\4\7\1\236\25\7\11\0"+
    "\2\7\4\0\11\7\1\237\20\7\11\0\2\7\4\0"+
    "\16\7\1\240\1\241\12\7\11\0\2\7\4\0\7\7"+
    "\1\242\22\7\11\0\2\7\4\0\16\7\1\243\13\7"+
    "\11\0\2\7\4\0\23\7\1\244\6\7\11\0\2\7"+
    "\4\0\16\7\1\245\13\7\11\0\2\7\4\0\12\7"+
    "\1\246\17\7\11\0\2\7\4\0\10\7\1\247\21\7"+
    "\11\0\2\7\4\0\16\7\1\250\13\7\11\0\2\7"+
    "\4\0\22\7\1\251\7\7\11\0\2\7\4\0\7\7"+
    "\1\252\22\7\11\0\2\7\4\0\12\7\1\253\17\7"+
    "\11\0\2\7\4\0\7\7\1\254\22\7\11\0\2\7"+
    "\4\0\11\7\1\255\5\7\1\256\12\7\11\0\2\7"+
    "\4\0\5\7\1\257\24\7\11\0\2\7\4\0\17\7"+
    "\1\260\12\7\11\0\2\7\4\0\10\7\1\261\21\7"+
    "\11\0\2\7\4\0\10\7\1\262\21\7\11\0\2\7"+
    "\4\0\15\7\1\263\14\7\11\0\2\7\4\0\12\7"+
    "\1\264\15\7\1\265\1\7\11\0\2\7\4\0\6\7"+
    "\1\266\5\7\1\267\15\7\11\0\2\7\4\0\4\7"+
    "\1\270\25\7\11\0\2\7\4\0\11\7\1\271\20\7"+
    "\11\0\2\7\4\0\15\7\1\272\14\7\11\0\2\7"+
    "\4\0\11\7\1\273\20\7\11\0\2\7\4\0\11\7"+
    "\1\274\20\7\11\0\2\7\4\0\11\7\1\275\20\7"+
    "\11\0\2\7\4\0\15\7\1\276\14\7\11\0\2\7"+
    "\4\0\12\7\1\277\17\7\11\0\2\7\4\0\4\7"+
    "\1\300\25\7\11\0\2\7\4\0\12\7\1\301\17\7"+
    "\11\0\2\7\4\0\1\302\31\7\11\0\2\7\4\0"+
    "\11\7\1\303\20\7\11\0\2\7\4\0\24\7\1\304"+
    "\5\7\11\0\2\7\4\0\15\7\1\305\14\7\11\0"+
    "\2\7\4\0\5\7\1\306\24\7\11\0\2\7\4\0"+
    "\10\7\1\307\21\7\11\0\2\7\4\0\15\7\1\310"+
    "\14\7\11\0\2\7\4\0\22\7\1\311\7\7\11\0"+
    "\2\7\4\0\1\7\1\312\30\7\11\0\2\7\4\0"+
    "\11\7\1\313\20\7\11\0\2\7\4\0\6\7\1\314"+
    "\23\7\11\0\2\7\4\0\12\7\1\315\7\7\1\316"+
    "\7\7\11\0\2\7\4\0\17\7\1\317\12\7\11\0"+
    "\2\7\4\0\14\7\1\320\15\7\11\0\2\7\4\0"+
    "\20\7\1\321\11\7\11\0\2\7\4\0\12\7\1\322"+
    "\17\7\11\0\2\7\4\0\11\7\1\323\20\7\11\0"+
    "\2\7\4\0\20\7\1\324\11\7\11\0\2\7\4\0"+
    "\1\325\31\7\11\0\2\7\4\0\6\7\1\326\23\7"+
    "\11\0\2\7\4\0\17\7\1\327\12\7\11\0\2\7"+
    "\4\0\12\7\1\330\6\7\1\331\10\7\11\0\2\7"+
    "\4\0\14\7\1\332\5\7\1\333\7\7\11\0\2\7"+
    "\4\0\17\7\1\334\12\7\11\0\2\7\4\0\10\7"+
    "\1\335\21\7\11\0\2\7\4\0\1\7\1\336\30\7"+
    "\11\0\2\7\4\0\4\7\1\337\25\7\11\0\2\7"+
    "\4\0\4\7\1\340\25\7\11\0\2\7\4\0\11\7"+
    "\1\341\20\7\11\0\2\7\4\0\14\7\1\342\15\7"+
    "\11\0\2\7\4\0\14\7\1\343\15\7\11\0\2\7"+
    "\4\0\22\7\1\344\7\7\11\0\2\7\4\0\16\7"+
    "\1\345\13\7\11\0\2\7\4\0\11\7\1\346\20\7"+
    "\11\0\2\7\4\0\1\347\31\7\11\0\2\7\4\0"+
    "\11\7\1\350\20\7\11\0\2\7\4\0\5\7\1\351"+
    "\24\7\11\0\2\7\4\0\11\7\1\352\20\7\11\0"+
    "\2\7\4\0\16\7\1\353\13\7\11\0\2\7\4\0"+
    "\12\7\1\354\17\7\11\0\2\7\4\0\11\7\1\355"+
    "\20\7\11\0\2\7\4\0\6\7\1\356\23\7\11\0"+
    "\2\7\4\0\1\7\1\357\30\7\11\0\2\7\4\0"+
    "\1\360\31\7\11\0\2\7\4\0\14\7\1\361\15\7"+
    "\11\0\2\7\4\0\17\7\1\362\12\7\11\0\2\7"+
    "\4\0\24\7\1\363\5\7\11\0\2\7\4\0\10\7"+
    "\1\364\21\7\11\0\2\7\4\0\14\7\1\365\15\7"+
    "\11\0\2\7\4\0\10\7\1\366\21\7\11\0\2\7"+
    "\4\0\1\7\1\367\30\7\11\0\2\7\4\0\6\7"+
    "\1\370\23\7\11\0\2\7\4\0\23\7\1\371\6\7"+
    "\11\0\2\7\4\0\1\7\1\372\30\7\11\0\2\7"+
    "\4\0\11\7\1\373\20\7\11\0\2\7\4\0\15\7"+
    "\1\374\14\7\11\0\2\7\4\0\10\7\1\375\21\7"+
    "\11\0\2\7\4\0\1\7\1\376\30\7\11\0\2\7"+
    "\4\0\6\7\1\377\23\7\11\0\2\7\4\0\10\7"+
    "\1\u0100\21\7\11\0\2\7\4\0\5\7\1\u0101\24\7"+
    "\11\0\2\7\4\0\10\7\1\u0102\21\7\11\0\2\7"+
    "\4\0\12\7\1\u0103\17\7\11\0\2\7\4\0\6\7"+
    "\1\u0104\23\7\11\0\2\7\4\0\11\7\1\u0105\20\7"+
    "\11\0\2\7\4\0\12\7\1\u0106\17\7\11\0\2\7"+
    "\4\0\11\7\1\u0107\20\7\11\0\2\7\4\0\1\u0108"+
    "\31\7\11\0\2\7\4\0\17\7\1\u0109\12\7\11\0"+
    "\2\7\4\0\20\7\1\u010a\11\7\11\0\2\7\4\0"+
    "\11\7\1\u010b\20\7\11\0\2\7\4\0\12\7\1\u010c"+
    "\17\7\11\0\2\7\4\0\10\7\1\u010d\21\7\11\0"+
    "\2\7\4\0\12\7\1\u010e\17\7\11\0\2\7\4\0"+
    "\6\7\1\u010f\23\7\11\0\2\7\4\0\10\7\1\u0110"+
    "\21\7\11\0\2\7\4\0\11\7\1\u0111\20\7\11\0"+
    "\2\7\4\0\1\u0112\31\7\11\0\2\7\4\0\11\7"+
    "\1\u0113\20\7\11\0\2\7\4\0\11\7\1\u0114\20\7"+
    "\11\0\2\7\4\0\17\7\1\u0115\12\7\11\0\2\7"+
    "\4\0\12\7\1\u0116\17\7\11\0\2\7\4\0\11\7"+
    "\1\u0117\20\7\11\0\2\7\4\0\5\7\1\u0118\24\7"+
    "\11\0\2\7\4\0\11\7\1\u0119\20\7\11\0\2\7"+
    "\4\0\1\7\1\u011a\30\7\11\0\2\7\4\0\24\7"+
    "\1\u011b\5\7\11\0\2\7\4\0\10\7\1\u011c\21\7"+
    "\11\0\2\7\4\0\17\7\1\u011d\12\7\11\0\2\7"+
    "\4\0\25\7\1\u011e\4\7\11\0\2\7\4\0\5\7"+
    "\1\u011f\24\7\11\0\2\7\4\0\12\7\1\u0120\17\7"+
    "\11\0\2\7\4\0\5\7\1\u0121\24\7\11\0\2\7"+
    "\4\0\11\7\1\u0122\20\7\11\0\2\7\4\0\5\7"+
    "\1\u0123\24\7\11\0\2\7\4\0\5\7\1\u0124\24\7"+
    "\11\0\2\7\4\0\21\7\1\u0125\10\7\11\0\2\7"+
    "\4\0\11\7\1\u0126\20\7\11\0\2\7\4\0\11\7"+
    "\1\u0127\20\7\11\0\2\7\4\0\20\7\1\u0128\11\7"+
    "\11\0\2\7\4\0\17\7\1\u0129\12\7\11\0\2\7"+
    "\4\0\6\7\1\u012a\23\7\11\0\2\7\4\0\17\7"+
    "\1\u012b\12\7\11\0\2\7\4\0\1\7\1\u012c\30\7"+
    "\11\0\2\7\4\0\11\7\1\u012d\20\7\11\0\2\7"+
    "\4\0\14\7\1\u012e\15\7\11\0\2\7\4\0\16\7"+
    "\1\u012f\13\7\11\0\2\7\4\0\11\7\1\u0130\20\7"+
    "\11\0\2\7\4\0\7\7\1\u0131\22\7\11\0\2\7"+
    "\4\0\4\7\1\u0132\25\7\11\0\2\7\4\0\23\7"+
    "\1\u0133\6\7\11\0\2\7\4\0\14\7\1\u0134\15\7"+
    "\11\0\2\7\4\0\17\7\1\u0135\12\7\11\0\2\7"+
    "\4\0\11\7\1\u0136\20\7\11\0\2\7\4\0\12\7"+
    "\1\u0137\17\7\11\0\2\7\4\0\11\7\1\u0138\20\7"+
    "\11\0\2\7\4\0\23\7\1\u0139\6\7\11\0\2\7"+
    "\4\0\12\7\1\u013a\17\7\11\0\2\7\4\0\1\u013b"+
    "\31\7\11\0\2\7\4\0\17\7\1\u013c\12\7\11\0"+
    "\2\7\4\0\1\7\1\u013d\30\7\11\0\2\7\4\0"+
    "\17\7\1\u013e\1\u013f\11\7\11\0\2\7\4\0\7\7"+
    "\1\u0140\22\7\11\0\2\7\4\0\11\7\1\u0141\20\7"+
    "\11\0\2\7\4\0\17\7\1\u0142\12\7\11\0\2\7"+
    "\4\0\6\7\1\u0143\23\7\11\0\2\7\4\0\11\7"+
    "\1\u0144\20\7\11\0\2\7\4\0\17\7\1\u0145\12\7"+
    "\11\0\2\7\4\0\5\7\1\u0146\24\7\11\0\2\7"+
    "\4\0\20\7\1\u0147\11\7\11\0\2\7\4\0\12\7"+
    "\1\u0148\17\7\11\0\2\7\4\0\6\7\1\u0149\23\7"+
    "\11\0\2\7\4\0\1\7\1\u014a\30\7\11\0\2\7"+
    "\4\0\3\7\1\u014b\26\7\11\0\2\7\4\0\17\7"+
    "\1\u014c\12\7\11\0\2\7\4\0\1\7\1\u014d\30\7"+
    "\11\0\2\7\4\0\12\7\1\u014e\17\7\11\0\2\7"+
    "\4\0\1\u014f\31\7\11\0\2\7\4\0\24\7\1\u0150"+
    "\5\7\11\0\2\7\4\0\20\7\1\u0151\11\7\11\0"+
    "\2\7\4\0\11\7\1\u0152\20\7\11\0\2\7\4\0"+
    "\11\7\1\u0153\20\7\11\0\2\7\4\0\15\7\1\u0154"+
    "\14\7\11\0\2\7\4\0\11\7\1\u0155\20\7\11\0"+
    "\2\7\4\0\11\7\1\u0156\20\7\11\0\2\7\4\0"+
    "\17\7\1\u0157\12\7\11\0\2\7\4\0\1\7\1\u0158"+
    "\30\7\11\0\2\7\4\0\11\7\1\u0159\20\7\11\0"+
    "\2\7\4\0\15\7\1\u015a\14\7\11\0\2\7\4\0"+
    "\11\7\1\u015b\20\7\11\0\2\7\4\0\1\7\1\u015c"+
    "\30\7\11\0\2\7\4\0\23\7\1\u015d\6\7\11\0"+
    "\2\7\4\0\17\7\1\u015e\12\7\11\0\2\7\4\0"+
    "\1\u015f\3\7\1\u0160\25\7\11\0\2\7\4\0\22\7"+
    "\1\u0161\7\7\11\0\2\7\4\0\14\7\1\u0162\15\7"+
    "\11\0\2\7\4\0\10\7\1\u0163\21\7\11\0\2\7"+
    "\4\0\27\7\1\u0164\2\7\11\0\2\7\4\0\23\7"+
    "\1\u0165\6\7\11\0\2\7\4\0\12\7\1\u0166\17\7"+
    "\11\0\2\7\4\0\11\7\1\u0167\20\7\11\0\2\7"+
    "\4\0\12\7\1\u0168\17\7\11\0\2\7\4\0\12\7"+
    "\1\u0169\17\7\11\0\2\7\4\0\12\7\1\u016a\17\7"+
    "\11\0\2\7\4\0\1\7\1\u016b\30\7\11\0\2\7"+
    "\4\0\12\7\1\u016c\17\7\11\0\2\7\4\0\15\7"+
    "\1\u016d\14\7\11\0\2\7\4\0\11\7\1\u016e\20\7"+
    "\11\0\2\7\4\0\24\7\1\u016f\5\7\11\0\2\7"+
    "\4\0\12\7\1\u0170\17\7\11\0\2\7\4\0\1\u0171"+
    "\31\7\11\0\2\7\4\0\11\7\1\u0172\5\7\1\u0173"+
    "\12\7\11\0\2\7\4\0\1\7\1\u0174\30\7\11\0"+
    "\2\7\4\0\20\7\1\u0175\11\7\11\0\2\7\4\0"+
    "\15\7\1\u0176\14\7\11\0\2\7\4\0\12\7\1\u0177"+
    "\17\7\11\0\2\7\4\0\20\7\1\u0178\11\7\11\0"+
    "\2\7\4\0\24\7\1\u0179\5\7\11\0\2\7\4\0"+
    "\1\u017a\31\7\11\0\2\7\4\0\6\7\1\u017b\23\7"+
    "\11\0\2\7\4\0\4\7\1\u017c\25\7\11\0\2\7"+
    "\4\0\6\7\1\u017d\23\7\11\0\2\7\4\0\4\7"+
    "\1\u017e\25\7\11\0\2\7\4\0\4\7\1\u017f\25\7"+
    "\11\0\2\7\4\0\14\7\1\u0180\15\7\11\0\2\7"+
    "\4\0\20\7\1\u0181\11\7\11\0\2\7\4\0\1\7"+
    "\1\u0182\30\7\11\0\2\7\4\0\16\7\1\u0183\13\7"+
    "\11\0\2\7\4\0\7\7\1\u0184\22\7\11\0\2\7"+
    "\4\0\11\7\1\u0185\20\7\11\0\2\7\4\0\15\7"+
    "\1\u0186\14\7\11\0\2\7\4\0\24\7\1\u0187\5\7"+
    "\11\0\2\7\4\0\11\7\1\u0188\20\7\11\0\2\7"+
    "\4\0\16\7\1\u0189\13\7\11\0\2\7\4\0\5\7"+
    "\1\u018a\24\7\11\0\2\7\4\0\1\u018b\31\7\11\0"+
    "\2\7\4\0\16\7\1\u018c\13\7\11\0\2\7\4\0"+
    "\11\7\1\u018d\20\7\11\0\2\7\4\0\10\7\1\u018e"+
    "\21\7\11\0\2\7\4\0\2\7\1\u018f\27\7\11\0"+
    "\2\7\4\0\11\7\1\u0190\20\7\11\0\2\7\4\0"+
    "\1\7\1\u0191\30\7\11\0\2\7\4\0\12\7\1\u0192"+
    "\17\7\11\0\2\7\4\0\12\7\1\u0193\17\7\11\0"+
    "\2\7\4\0\15\7\1\u0194\14\7\11\0\2\7\4\0"+
    "\11\7\1\u0195\20\7\11\0\2\7\4\0\1\7\1\u0196"+
    "\30\7\11\0\2\7\4\0\11\7\1\u0197\20\7\11\0"+
    "\2\7\4\0\15\7\1\u0198\14\7\11\0\2\7\4\0"+
    "\12\7\1\u0199\17\7\11\0\2\7\4\0\14\7\1\u019a"+
    "\15\7\11\0\2\7\4\0\11\7\1\u019b\20\7\11\0"+
    "\2\7\4\0\2\7\1\u019c\27\7\11\0\2\7\4\0"+
    "\11\7\1\u019d\20\7\11\0\2\7\4\0\11\7\1\u019e"+
    "\20\7\11\0\2\7\4\0\12\7\1\u019f\17\7\11\0"+
    "\2\7\4\0\11\7\1\u01a0\20\7\11\0\2\7\4\0"+
    "\16\7\1\u01a1\13\7\11\0\2\7\4\0\17\7\1\u01a2"+
    "\12\7\11\0\2\7\4\0\23\7\1\u01a3\6\7\11\0"+
    "\2\7\4\0\1\7\1\u01a4\30\7\11\0\2\7\4\0"+
    "\24\7\1\u01a5\5\7\11\0\2\7\4\0\14\7\1\u01a6"+
    "\15\7\11\0\2\7\4\0\12\7\1\u01a7\17\7\11\0"+
    "\2\7\4\0\11\7\1\u01a8\20\7\11\0\2\7\4\0"+
    "\12\7\1\u01a9\17\7\11\0\2\7\4\0\13\7\1\u01aa"+
    "\16\7\11\0\2\7\4\0\6\7\1\u01ab\23\7\11\0"+
    "\2\7\4\0\6\7\1\u01ac\23\7\11\0\2\7\4\0"+
    "\16\7\1\u01ad\13\7\11\0\2\7\4\0\17\7\1\u01ae"+
    "\12\7\11\0\2\7\4\0\11\7\1\u01af\20\7\11\0"+
    "\2\7\4\0\1\7\1\u01b0\30\7\11\0\2\7\4\0"+
    "\6\7\1\u01b1\23\7\11\0\2\7\4\0\17\7\1\u01b2"+
    "\12\7\11\0\2\7\4\0\17\7\1\u01b3\12\7\11\0"+
    "\2\7\4\0\1\7\1\u01b4\30\7\11\0\2\7\4\0"+
    "\1\7\1\u01b5\30\7\11\0\2\7\4\0\1\7\1\u01b6"+
    "\30\7\11\0\2\7\4\0\23\7\1\u01b7\6\7\11\0"+
    "\2\7\4\0\1\7\1\u01b8\30\7\11\0\2\7\4\0"+
    "\16\7\1\u01b9\13\7\11\0\2\7\4\0\14\7\1\u01ba"+
    "\15\7\11\0\2\7\4\0\15\7\1\u01bb\14\7\11\0"+
    "\2\7\4\0\17\7\1\u01bc\12\7\11\0\2\7\4\0"+
    "\2\7\1\u01bd\27\7\11\0\2\7\4\0\11\7\1\u01be"+
    "\20\7\11\0\2\7\4\0\23\7\1\u01bf\6\7\11\0"+
    "\2\7\4\0\15\7\1\u01c0\14\7\11\0\2\7\4\0"+
    "\23\7\1\u01c1\6\7\11\0\2\7\4\0\12\7\1\u01c2"+
    "\17\7\11\0\2\7\4\0\15\7\1\u01c3\14\7\11\0"+
    "\2\7\4\0\15\7\1\u01c4\14\7\11\0\2\7\4\0"+
    "\12\7\1\u01c5\17\7\11\0\2\7\4\0\12\7\1\u01c6"+
    "\17\7\11\0\2\7\4\0\12\7\1\u01c7\17\7\11\0"+
    "\2\7\4\0\1\u01c8\31\7\11\0\2\7\4\0\14\7"+
    "\1\u01c9\15\7\11\0\2\7\4\0\12\7\1\u01ca\17\7"+
    "\11\0\2\7\4\0\1\u01cb\31\7\11\0\2\7\4\0"+
    "\15\7\1\u01cc\14\7\11\0\2\7\4\0\17\7\1\u01cd"+
    "\12\7\11\0\2\7\4\0\1\7\1\u01ce\30\7\11\0"+
    "\2\7\4\0\11\7\1\u01cf\20\7\11\0\2\7\4\0"+
    "\1\7\1\u01d0\30\7\11\0\2\7\4\0\1\7\1\u01d1"+
    "\30\7\11\0\2\7\4\0\14\7\1\u01d2\15\7\11\0"+
    "\2\7\4\0\14\7\1\u01d3\15\7\11\0\2\7\4\0"+
    "\12\7\1\u01d4\17\7\11\0\2\7\4\0\12\7\1\u01d5"+
    "\17\7\11\0\2\7\4\0\1\u01d6\31\7\11\0\2\7"+
    "\4\0\7\7\1\u01d7\22\7\11\0\2\7\4\0\1\7"+
    "\1\u01d8\30\7\11\0\2\7\4\0\7\7\1\u01d9\22\7"+
    "\11\0\2\7\4\0\23\7\1\u01da\6\7\11\0\2\7"+
    "\4\0\11\7\1\u01db\20\7\11\0\2\7\4\0\1\u01dc"+
    "\31\7\11\0\2\7\4\0\7\7\1\u01dd\22\7\11\0"+
    "\2\7\4\0\11\7\1\u01de\20\7\11\0\2\7\4\0"+
    "\17\7\1\u01df\12\7\11\0\2\7\4\0\1\7\1\u01e0"+
    "\30\7\11\0\2\7\4\0\12\7\1\u01e1\17\7\11\0"+
    "\2\7\4\0\20\7\1\u01e2\11\7\11\0\2\7\4\0"+
    "\14\7\1\u01e3\15\7\11\0\2\7\4\0\11\7\1\u01e4"+
    "\20\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16523];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\4\11\27\1\1\11\1\0\1\11"+
    "\64\1\1\0\100\1\1\11\u0149\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 91: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 3: 
            { return YANG_IDENTIFIER;
            } 
            // fall through
          case 93: break;
          case 4: 
            { return YANG_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 94: break;
          case 5: 
            { return YANG_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 95: break;
          case 6: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 96: break;
          case 7: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 97: break;
          case 8: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 98: break;
          case 9: 
            { return YANG_PLUS;
            } 
            // fall through
          case 99: break;
          case 10: 
            { return YANG_LINE_COMMENT;
            } 
            // fall through
          case 100: break;
          case 11: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 101: break;
          case 12: 
            { return YANG_ADD_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 13: 
            { return YANG_MAX_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 14: 
            { return YANG_MIN_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 15: 
            { return YANG_RPC_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 16: 
            { return YANG_BIT_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 17: 
            { return YANG_KEY_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 18: 
            { return YANG_MUST_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 19: 
            { return YANG_LEAF_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 20: 
            { return YANG_LIST_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 21: 
            { return YANG_USER_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 22: 
            { return YANG_USES_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 23: 
            { return YANG_ENUM_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 24: 
            { return YANG_TYPE_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 25: 
            { return YANG_TRUE_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 26: 
            { return YANG_BASE_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 27: 
            { return YANG_CASE_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 28: 
            { return YANG_PATH_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 29: 
            { return YANG_WHEN_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 30: 
            { return YANG_RANGE_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 31: 
            { return YANG_UNITS_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 32: 
            { return YANG_INPUT_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 33: 
            { return YANG_FALSE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 34: 
            { return YANG_VALUE_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 35: 
            { return YANG_ANYXML_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 36: 
            { return YANG_MODULE_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 37: 
            { return YANG_LENGTH_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 38: 
            { return YANG_REFINE_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 39: 
            { return YANG_UNIQUE_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 40: 
            { return YANG_SYSTEM_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 41: 
            { return YANG_STATUS_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 42: 
            { return YANG_OUTPUT_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 43: 
            { return YANG_IMPORT_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 44: 
            { return YANG_CONFIG_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 45: 
            { return YANG_CHOICE_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 46: 
            { return YANG_DELETE_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 47: 
            { return YANG_PREFIX_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 48: 
            { return YANG_AUGMENT_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 49: 
            { return YANG_REPLACE_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 50: 
            { return YANG_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 51: 
            { return YANG_INCLUDE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 52: 
            { return YANG_CURRENT_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 53: 
            { return YANG_CONTACT_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 54: 
            { return YANG_FEATURE_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 55: 
            { return YANG_DEFAULT_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 56: 
            { return YANG_DEVIATE_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 57: 
            { return YANG_PATTERN_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 58: 
            { return YANG_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 59: 
            { return YANG_REVISION_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 60: 
            { return YANG_GROUPING_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 61: 
            { return YANG_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 62: 
            { return YANG_IDENTITY_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 63: 
            { return YANG_PRESENCE_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 64: 
            { return YANG_POSITION_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 65: 
            { return YANG_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 66: 
            { return YANG_MANDATORY_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 67: 
            { return YANG_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 68: 
            { return YANG_REFERENCE_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 69: 
            { return YANG_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 70: 
            { return YANG_EXTENSION_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 71: 
            { return YANG_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 72: 
            { return YANG_CONTAINER_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 73: 
            { return YANG_DEVIATION_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 74: 
            { return YANG_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 75: 
            { return YANG_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 76: 
            { return YANG_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 77: 
            { return YANG_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 78: 
            { return YANG_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 79: 
            { return YANG_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 80: 
            { return YANG_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 81: 
            { return YANG_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 82: 
            { return YANG_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 83: 
            { return YANG_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 84: 
            { return YANG_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 85: 
            { return YANG_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 86: 
            { return YANG_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 87: 
            { return YANG_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 88: 
            { return YANG_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 89: 
            { return YANG_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 90: 
            { return YANG_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
