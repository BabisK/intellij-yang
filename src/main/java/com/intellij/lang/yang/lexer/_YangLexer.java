/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.lang.yang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.yang.psi.YangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153"+
    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13"+
    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2"+
    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170"+
    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127"+
    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10"+
    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171"+
    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41"+
    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2"+
    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16"+
    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1"+
    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215"+
    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1"+
    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1"+
    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225"+
    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1"+
    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56"+
    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3"+
    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13"+
    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42"+
    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242"+
    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3"+
    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1"+
    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3"+
    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147"+
    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253"+
    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256"+
    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261"+
    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4"+
    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1"+
    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1"+
    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1"+
    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120"+
    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5"+
    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1"+
    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302"+
    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1"+
    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42"+
    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103"+
    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\6\4\0\1\7\2\0\1\5\1\22\1\0\1\12\1\14"+
    "\1\4\12\15\1\20\1\21\5\0\32\11\1\0\1\10\2\0\1\11\1\0\1\25\1\37\1\43\1\45\1"+
    "\24\1\26\1\34\1\44\1\42\1\11\1\50\1\23\1\33\1\30\1\41\1\46\1\52\1\27\1\40"+
    "\1\36\1\35\1\47\1\53\1\32\1\31\1\51\1\16\1\0\1\17\7\0\1\1\12\0\1\3\11\0\1"+
    "\13\12\0\1\13\4\0\1\13\5\0\27\13\1\0\12\13\4\0\14\13\16\0\5\13\7\0\1\13\1"+
    "\0\1\13\1\0\5\13\1\0\2\13\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0"+
    "\4\13\1\0\23\13\1\0\11\13\1\0\26\13\2\0\1\13\6\0\10\13\10\0\16\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\13\10\0\13\13\5\0\3\13\15\0\12\13\4\0\6\13\1\0\10"+
    "\13\2\0\12\13\1\0\23\13\2\0\14\13\2\0\11\13\4\0\1\13\5\0\16\13\2\0\14\13\4"+
    "\0\5\13\1\0\10\13\6\0\20\13\2\0\13\13\2\0\16\13\1\0\1\13\3\0\4\13\2\0\11\13"+
    "\2\0\2\13\2\0\4\13\10\0\1\13\4\0\2\13\1\0\1\13\1\0\3\13\1\0\6\13\4\0\2\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7"+
    "\0\4\13\1\0\1\13\7\0\20\13\13\0\3\13\1\0\11\13\1\0\2\13\1\0\2\13\1\0\5\13"+
    "\2\0\12\13\1\0\3\13\1\0\3\13\2\0\1\13\30\0\1\13\7\0\3\13\1\0\10\13\2\0\6\13"+
    "\2\0\2\13\2\0\3\13\10\0\2\13\4\0\2\13\1\0\1\13\1\0\1\13\20\0\2\13\1\0\6\13"+
    "\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\5\13\3"+
    "\0\3\13\1\0\4\13\2\0\1\13\6\0\1\13\10\0\4\13\1\0\10\13\1\0\3\13\1\0\30\13"+
    "\3\0\10\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\3\13\5\0\4\13\1\0\5\13\2\0\4\13"+
    "\5\0\2\13\7\0\1\13\2\0\2\13\16\0\3\13\1\0\10\13\1\0\7\13\1\0\3\13\1\0\5\13"+
    "\5\0\4\13\7\0\1\13\12\0\6\13\2\0\2\13\1\0\22\13\3\0\10\13\1\0\11\13\1\0\1"+
    "\13\2\0\7\13\3\0\1\13\4\0\6\13\1\0\1\13\1\0\10\13\2\0\2\13\14\0\17\13\1\0"+
    "\12\13\7\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0"+
    "\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\15\13\1\0\3\13\2\0\5\13\1\0\1\13\1\0"+
    "\6\13\2\0\12\13\2\0\4\13\10\0\2\13\13\0\1\13\1\0\1\13\1\0\1\13\4\0\12\13\1"+
    "\0\24\13\3\0\5\13\1\0\12\13\6\0\1\13\11\0\6\13\1\0\1\13\5\0\1\13\2\0\13\13"+
    "\1\0\15\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\1\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\16\13\2\0\6\13\2\0\1\3\32\13\3\0\13\13\7\0\15\13\1"+
    "\0\7\13\13\0\4\13\14\0\1\13\1\0\2\13\14\0\4\13\3\0\1\13\4\0\2\13\15\0\3\13"+
    "\11\0\1\13\23\0\10\13\1\0\23\13\1\0\2\13\6\0\6\13\5\0\15\13\1\0\1\13\1\0\1"+
    "\13\1\0\1\13\1\0\6\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13"+
    "\4\0\13\3\15\0\2\1\5\0\1\3\17\0\1\13\4\0\1\13\12\0\1\3\1\0\1\13\15\0\1\13"+
    "\2\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\4\13\1\0\1\13\5\0\5\13\4\0\1\13\1\0\5\13\6\0\15\13\7\0\10\13\11\0\7\13"+
    "\1\0\7\13\1\0\1\3\4\0\3\13\11\0\5\13\2\0\5\13\3\0\7\13\2\0\2\13\2\0\3\13\5"+
    "\0\16\13\1\0\12\13\1\0\1\13\7\0\11\13\2\0\27\13\2\0\15\13\3\0\1\13\1\0\1\13"+
    "\2\0\1\13\16\0\1\13\2\0\5\13\12\0\6\13\2\0\6\13\2\0\6\13\11\0\13\13\1\0\2"+
    "\13\2\0\7\13\4\0\5\13\3\0\5\13\5\0\12\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2"+
    "\13\1\0\12\13\3\0\15\13\3\0\2\13\30\0\16\13\4\0\1\13\2\0\6\13\2\0\6\13\2\0"+
    "\6\13\2\0\3\13\3\0\14\13\1\0\16\13\1\0\2\13\1\0\1\13\15\0\1\13\2\0\4\13\4"+
    "\0\10\13\1\0\5\13\12\0\6\13\2\0\1\13\1\0\14\13\1\0\2\13\3\0\1\13\2\0\4\13"+
    "\1\0\2\13\12\0\10\13\6\0\6\13\1\0\2\13\5\0\10\13\1\0\3\13\1\0\13\13\4\0\3"+
    "\13\4\0\5\13\2\0\1\13\11\0\5\13\5\0\3\13\3\0\13\13\1\0\1\13\3\0\10\13\6\0"+
    "\1\13\1\0\7\13\1\0\1\13\1\0\4\13\1\0\2\13\6\0\1\13\5\0\7\13\2\0\7\13\3\0\6"+
    "\13\1\0\1\13\10\0\6\13\2\0\10\13\10\0\6\13\2\0\1\13\3\0\1\13\13\0\10\13\5"+
    "\0\15\13\3\0\2\13\6\0\5\13\3\0\6\13\10\0\10\13\2\0\7\13\16\0\4\13\4\0\3\13"+
    "\15\0\1\13\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0\21\13\1\0\4\13"+
    "\2\0\10\13\1\0\7\13\1\0\14\13\1\0\4\13\1\0\5\13\1\0\1\13\3\0\11\13\1\0\10"+
    "\13\2\0\2\13\5\0\1\13\16\0\1\13\13\0\2\13\1\0\2\13\1\0\5\13\6\0\2\13\1\0\1"+
    "\13\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13\4\0\1\13\1\0\1"+
    "\13\1\0\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1"+
    "\0\12\13\1\0\5\13\1\0\3\13\1\0\5\13\1\0\5\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\25\6\1\15\1\16"+
    "\1\4\2\5\1\6\1\7\64\6\1\0\1\7\11\6"+
    "\1\17\10\6\1\20\5\6\1\21\2\6\1\22\10\6"+
    "\1\23\31\6\1\24\1\6\1\16\1\7\1\25\1\6"+
    "\1\26\1\6\1\27\24\6\1\30\6\6\1\31\1\32"+
    "\1\33\1\34\1\6\1\35\14\6\1\36\12\6\1\37"+
    "\4\6\1\40\1\0\11\6\1\41\6\6\1\42\13\6"+
    "\1\43\14\6\1\44\17\6\1\45\1\0\2\6\1\46"+
    "\3\6\1\47\4\6\1\50\12\6\1\51\3\6\1\52"+
    "\2\6\1\53\1\6\1\54\2\6\1\55\3\6\1\56"+
    "\2\6\1\57\2\6\1\60\1\61\5\6\1\62\2\6"+
    "\2\0\1\6\1\63\4\6\1\64\1\65\2\6\1\66"+
    "\14\6\1\67\6\6\1\70\1\6\1\71\1\6\1\72"+
    "\1\73\2\6\1\74\1\6\1\75\2\6\1\76\4\6"+
    "\1\77\2\6\1\100\11\6\1\101\5\6\1\102\1\6"+
    "\1\103\4\6\1\104\1\105\1\76\1\106\2\6\1\107"+
    "\1\6\1\110\2\6\1\111\4\6\1\112\2\6\1\113"+
    "\1\6\1\114\3\6\1\115\2\6\1\116\13\6\1\117"+
    "\1\6\1\120\1\121\1\6\1\122\10\6\1\123\3\6"+
    "\1\124\6\6\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\6\1\134\1\6\1\135\2\6\1\136\1\6"+
    "\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\54\0\54\0\54\0\54\0\54\0\u018c\0\u01b8"+
    "\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"+
    "\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\54\0\54\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840"+
    "\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0"+
    "\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u0108\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u0108\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u0108\0\u1524\0\u1550\0\u157c"+
    "\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc"+
    "\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"+
    "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u0108\0\u1970"+
    "\0\54\0\u199c\0\u19c8\0\u19f4\0\u0108\0\u1a20\0\u0108\0\u1a4c"+
    "\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac"+
    "\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c"+
    "\0\u1d38\0\u1d64\0\u1d90\0\u0108\0\u1dbc\0\u1de8\0\u1e14\0\u1e40"+
    "\0\u1e6c\0\u1e98\0\u0108\0\u0108\0\u0108\0\u1ec4\0\u1ef0\0\u0108"+
    "\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050"+
    "\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u0108\0\u212c\0\u2158\0\u2184"+
    "\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u0108"+
    "\0\u22e4\0\u2310\0\u233c\0\u2368\0\u0108\0\u2394\0\u23c0\0\u23ec"+
    "\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u0108"+
    "\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u0108\0\u2654"+
    "\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4"+
    "\0\u27e0\0\u280c\0\u0108\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u0108"+
    "\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c"+
    "\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u0108"+
    "\0\u2cdc\0\u2d08\0\u2d34\0\u0108\0\u2d60\0\u2d8c\0\u2db8\0\u0108"+
    "\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u0108\0\u2e94\0\u2ec0\0\u2eec"+
    "\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u0108"+
    "\0\u304c\0\u3078\0\u30a4\0\u0108\0\u30d0\0\u30fc\0\u0108\0\u3128"+
    "\0\u0108\0\u3154\0\u3180\0\u0108\0\u31ac\0\u31d8\0\u3204\0\u0108"+
    "\0\u3230\0\u325c\0\u0108\0\u3288\0\u32b4\0\u0108\0\u0108\0\u32e0"+
    "\0\u330c\0\u3338\0\u3364\0\u3390\0\u0108\0\u33bc\0\u33e8\0\u3414"+
    "\0\u3440\0\u346c\0\u0108\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u0108"+
    "\0\u0108\0\u3548\0\u3574\0\u0108\0\u35a0\0\u35cc\0\u35f8\0\u3624"+
    "\0\u3650\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784"+
    "\0\u0108\0\u37b0\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u0108"+
    "\0\u38b8\0\u0108\0\u38e4\0\u0108\0\u0108\0\u3910\0\u393c\0\u0108"+
    "\0\u3968\0\u0108\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44\0\u3a70"+
    "\0\u3a9c\0\u0108\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4"+
    "\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac\0\u0108\0\u3cd8"+
    "\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u0108\0\u3db4\0\u0108\0\u3de0"+
    "\0\u3e0c\0\u3e38\0\u3e64\0\u0108\0\u0108\0\54\0\u05ac\0\u3e90"+
    "\0\u3ebc\0\u0108\0\u3ee8\0\u0108\0\u3f14\0\u3f40\0\u0108\0\u3f6c"+
    "\0\u3f98\0\u3fc4\0\u3ff0\0\u0108\0\u401c\0\u4048\0\u0108\0\u4074"+
    "\0\u0108\0\u40a0\0\u40cc\0\u40f8\0\u0108\0\u4124\0\u4150\0\u0108"+
    "\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0"+
    "\0\u42dc\0\u4308\0\u4334\0\u05ac\0\u4360\0\u05ac\0\u05ac\0\u438c"+
    "\0\u0108\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0"+
    "\0\u44ec\0\u05ac\0\u4518\0\u4544\0\u4570\0\u0108\0\u459c\0\u45c8"+
    "\0\u45f4\0\u4620\0\u464c\0\u4678\0\u0108\0\u05ac\0\u05ac\0\u05ac"+
    "\0\u0108\0\u05ac\0\u05ac\0\u46a4\0\u05ac\0\u46d0\0\u05ac\0\u46fc"+
    "\0\u4728\0\u05ac\0\u4754\0\u05ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\2\2\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\7"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\7\1\37\1\40\1\41\1\42\2\7\1\43"+
    "\55\0\3\3\54\0\1\44\1\45\46\0\6\5\1\46"+
    "\45\5\2\6\1\0\4\6\1\47\1\50\43\6\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\31\7\11\0"+
    "\1\10\1\0\3\10\5\0\31\10\11\0\1\10\1\0"+
    "\2\10\1\52\5\0\31\10\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\53\15\7\1\54\11\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\4\7"+
    "\1\55\1\56\1\7\1\57\21\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\4\7\1\60\1\61\4\7"+
    "\1\62\7\7\1\63\6\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\64\1\65\1\7\1\66"+
    "\24\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\67\1\70\20\7\1\71\5\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\2\7\1\72\13\7"+
    "\1\73\12\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\2\7\1\74\14\7\1\75\11\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\2\7\1\76\7\7"+
    "\1\77\3\7\1\100\1\101\11\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\4\7\1\102\24\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\5\7\1\103"+
    "\7\7\1\104\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\4\7\1\105\1\7\1\106\22\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\7\1\107"+
    "\1\110\14\7\1\111\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\6\7\1\112\3\7\1\113\1\114"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\4\7\1\115\5\7\1\116\1\7\1\117\14\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\3\7\1\120"+
    "\1\7\1\121\2\7\1\122\11\7\1\123\6\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\2\7\1\124"+
    "\7\7\1\125\3\7\1\126\2\7\1\127\7\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\7\1\130"+
    "\27\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\2\7\1\131\1\7\1\132\11\7\1\133\12\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\2\7\1\134"+
    "\26\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\135\27\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\21\7\1\136\7\7\1\44\2\0\51\44"+
    "\5\45\1\137\46\45\2\6\1\0\5\6\1\50\43\6"+
    "\10\0\3\51\1\0\2\51\5\0\31\51\11\0\1\10"+
    "\1\0\2\10\1\140\5\0\31\10\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\2\7\1\141\2\7\1\142"+
    "\23\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\15\7\1\143\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\4\7\1\144\24\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\12\7\1\145\16\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\13\7\1\146"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\11\7\1\147\17\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\6\7\1\150\22\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\11\7\1\151\17\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\152"+
    "\6\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\2\7\1\153\26\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\154\30\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\2\7\1\155\26\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\3\7\1\156\17\7"+
    "\1\157\1\160\2\7\1\161\1\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\162\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\20\7\1\163"+
    "\10\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\10\7\1\164\20\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\165\15\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\166\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\5\7\1\167"+
    "\23\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\170\1\7\1\171\21\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\15\7\1\172\13\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\173"+
    "\6\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\174\23\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\16\7\1\175\12\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\14\7\1\176\2\7\1\177"+
    "\11\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\200\27\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\12\7\1\201\16\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\23\7\1\202\5\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\203\30\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\15\7"+
    "\1\204\13\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\205\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\15\7\1\206\13\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\14\7\1\207\14\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\2\7"+
    "\1\210\26\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\11\7\1\211\10\7\1\212\6\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\13\7\1\213\15\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\15\7"+
    "\1\214\13\7\10\0\1\51\1\7\1\215\1\10\2\7"+
    "\5\0\31\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\20\7\1\216\2\7\1\217\5\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\23\7\1\220\5\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\221\27\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\15\7\1\222\13\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\223\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\224\23\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\16\7"+
    "\1\225\12\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\226\2\7\1\227\11\7\1\230\5\7\1\231"+
    "\1\232\4\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\233\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\234\27\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\15\7\1\235\13\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\236"+
    "\30\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\6\7\1\237\22\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\240\27\7\4\45\1\241\1\137"+
    "\46\45\11\0\1\10\1\0\2\10\1\242\5\0\31\10"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\3\7"+
    "\1\243\25\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\11\7\1\244\17\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\13\7\1\245\15\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\16\7\1\246\12\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\10\7"+
    "\1\247\20\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\250\27\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\12\7\1\251\16\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\7\7\1\252\21\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\10\7"+
    "\1\253\20\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\254\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\15\7\1\255\13\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\20\7\1\256\10\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\257\15\7\1\260\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\261\30\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\17\7\1\262\11\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\12\7\1\263"+
    "\16\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\11\7\1\264\17\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\265\27\7\10\0\1\51\1\7"+
    "\1\266\1\10\2\7\5\0\17\7\1\267\11\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\11\7\1\270"+
    "\17\7\10\0\1\51\1\7\1\271\1\10\2\7\5\0"+
    "\31\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\22\7\1\272\6\7\10\0\1\51\1\7\1\273\1\10"+
    "\2\7\5\0\31\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\274\15\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\12\7\1\275\16\7\10\0"+
    "\1\51\1\7\1\276\1\10\2\7\5\0\31\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\12\7\1\277"+
    "\16\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\16\7\1\300\12\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\301\13\7\1\302\1\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\4\7\1\303"+
    "\10\7\1\304\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\305\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\1\7\1\306\27\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\16\7\1\307"+
    "\12\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\310\27\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\311\15\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\10\7\1\312\20\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\13\7\1\313"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\2\7\1\314\26\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\315\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\23\7\1\316\5\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\16\7\1\317"+
    "\12\7\10\0\3\51\1\0\2\51\5\0\3\51\1\320"+
    "\25\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\321\30\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\12\7\1\322\16\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\16\7\1\323\12\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\324\23\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\325\27\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\4\7\1\326\24\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\3\7\1\327\7\7\1\330\15\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\17\7"+
    "\1\331\11\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\332\27\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\2\7\1\333\26\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\20\7\1\334\10\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\4\7"+
    "\1\335\24\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\17\7\1\336\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\13\7\1\337\5\7\1\340\7\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\3\7"+
    "\1\341\11\7\1\342\13\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\17\7\1\343\11\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\12\7\1\344\16\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\5\7"+
    "\1\345\23\7\11\0\1\10\1\346\3\10\5\0\31\10"+
    "\10\0\1\51\1\7\1\347\1\10\2\7\5\0\4\7"+
    "\1\350\24\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\351\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\352\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\353\23\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\10\7"+
    "\1\354\20\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\10\7\1\355\20\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\356\27\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\12\7\1\357\16\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\360\27\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\361\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\362\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\363\23\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\2\7"+
    "\1\364\26\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\15\7\1\365\13\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\17\7\1\366\11\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\367\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\15\7"+
    "\1\370\13\7\10\0\3\51\1\0\2\51\5\0\15\51"+
    "\1\371\13\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\3\7\1\372\25\7\10\0\1\51\1\7\1\373"+
    "\1\10\2\7\5\0\31\7\10\0\3\51\1\0\2\51"+
    "\5\0\1\51\1\374\27\51\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\2\7\1\375\26\7\10\0\3\51"+
    "\1\0\2\51\5\0\1\51\1\376\27\51\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\377\30\7\10\0"+
    "\3\51\1\0\2\51\5\0\1\51\1\u0100\27\51\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\23\7\1\u0101"+
    "\5\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\12\7\1\u0102\16\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\15\7\1\u0103\13\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\12\7\1\u0104\16\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\u0105"+
    "\6\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u0106\23\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0107\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\16\7\1\u0108\12\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\12\7\1\u0109"+
    "\16\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u010a\23\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\4\7\1\u010b\24\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\12\7\1\u010c\16\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\u010d\30\7"+
    "\10\0\3\51\1\0\2\51\5\0\1\51\1\u010e\27\51"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\12\7"+
    "\1\u010f\16\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\13\7\1\u0110\15\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\u0111\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\13\7\1\u0112\15\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\u0113\27\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\17\7\1\u0114\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\2\7\1\u0115\26\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\20\7\1\u0116\10\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\13\7"+
    "\1\u0117\15\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\12\7\1\u0118\16\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\u0119\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u011a\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\2\7"+
    "\1\u011b\26\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\u011c\27\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\17\7\1\u011d\11\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u011e\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\13\7"+
    "\1\u011f\15\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\u0120\27\7\15\0\1\u0121\46\0\3\51"+
    "\1\0\2\51\5\0\1\u0122\30\51\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\1\7\1\u0123\27\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\21\7\1\u0124"+
    "\7\7\10\0\1\51\1\7\1\u0125\1\10\2\7\5\0"+
    "\31\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\15\7\1\u0126\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0127\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\1\u0128\30\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\u0129\23\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\4\7"+
    "\1\u012a\24\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\17\7\1\u012b\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\u012c\27\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u012d\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\20\7"+
    "\1\u012e\10\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\17\7\1\u012f\11\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\4\7\1\u0130\24\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\23\7\1\u0131\5\7"+
    "\10\0\3\51\1\0\2\51\5\0\12\51\1\u0132\16\51"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\17\7"+
    "\1\u0133\11\7\10\0\3\51\1\0\2\51\5\0\24\51"+
    "\1\u0134\4\51\10\0\3\51\1\0\2\51\5\0\1\u0135"+
    "\30\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\13\7\1\u0136\15\7\10\0\3\51\1\0\2\51\5\0"+
    "\1\u0137\30\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\u0138\27\7\10\0\3\51\1\0\2\51"+
    "\5\0\1\u0139\30\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\17\7\1\u013a\11\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\u013b\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\7\1\u013c"+
    "\27\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\u013d\27\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\11\7\1\u013e\17\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\10\7\1\u013f\20\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\u0140"+
    "\6\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\15\7\1\u0141\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\17\7\1\u0142\11\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\1\7\1\u0143\27\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\13\7\1\u0144"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\u0145\27\7\10\0\3\51\1\0\2\51\5\0"+
    "\2\51\1\u0146\26\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\22\7\1\u0147\6\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\13\7\1\u0148\15\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\17\7\1\u0149"+
    "\11\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u014a\23\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\11\7\1\u014b\17\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\17\7\1\u014c\1\u014d\10\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\u014e\27\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\1\7\1\u014f\27\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\u0150\30\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\17\7\1\u0151\11\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\20\7\1\u0152"+
    "\10\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\13\7\1\u0153\15\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\4\7\1\u0154\24\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\7\7\1\u0155\21\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\5\7\1\u0156"+
    "\23\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\17\7\1\u0157\11\7\12\0\1\u0158\2\0\1\u0159\46\0"+
    "\3\51\1\0\2\51\5\0\17\51\1\u015a\11\51\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\3\7\1\u015b"+
    "\25\7\10\0\3\51\1\0\2\51\5\0\2\51\1\u015c"+
    "\5\51\1\u015d\20\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\17\7\1\u015e\11\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\u015f\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\13\7\1\u0160"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\1\7\1\u0161\27\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\16\7\1\u0162\12\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\u0163\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\1\7\1\u0164"+
    "\27\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\16\7\1\u0165\12\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0166\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\2\7\1\u0167\26\7\10\0"+
    "\3\51\1\0\2\51\5\0\23\51\1\u0168\5\51\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\20\7\1\u0169"+
    "\10\7\10\0\3\51\1\0\2\51\5\0\1\51\1\u016a"+
    "\27\51\10\0\3\51\1\0\2\51\5\0\1\51\1\u016b"+
    "\27\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\16\7\1\u016c\12\7\10\0\3\51\1\0\2\51\5\0"+
    "\1\51\1\u016d\27\51\10\0\3\51\1\0\2\51\5\0"+
    "\1\51\1\u016e\27\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\5\7\1\u016f\23\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\22\7\1\u0170\6\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\3\7\1\u0171"+
    "\25\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\15\7\1\u0172\13\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\12\7\1\u0173\16\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\26\7\1\u0174\2\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\u0175"+
    "\6\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\13\7\1\u0176\15\7\10\0\3\51\1\0\2\51\5\0"+
    "\13\51\1\u0177\15\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0178\27\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\13\7\1\u0179\15\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\13\7\1\u017a"+
    "\15\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u017b\23\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\u017c\15\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\13\7\1\u017d\15\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\23\7\1\u017e"+
    "\5\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\2\7\1\u017f\26\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0180\15\7\1\u0181\11\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\5\7\1\u0182"+
    "\23\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\20\7\1\u0183\10\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\16\7\1\u0184\12\7\15\0\1\u0185\50\0"+
    "\1\u0158\51\0\3\51\1\0\2\51\5\0\15\51\1\u0186"+
    "\13\51\10\0\3\51\1\0\2\51\5\0\23\51\1\u0187"+
    "\5\51\10\0\3\51\1\0\2\51\5\0\1\51\1\u0188"+
    "\27\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\16\7\1\u0189\12\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\13\7\1\u018a\15\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\u018b\23\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\20\7\1\u018c"+
    "\10\7\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u018d\23\7\10\0\1\51\1\7\1\u018e\1\10"+
    "\2\7\5\0\31\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\20\7\1\u018f\10\7\10\0\3\51\1\0"+
    "\2\51\5\0\23\51\1\u0190\5\51\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\2\7\1\u0191\26\7\10\0"+
    "\3\51\1\0\2\51\5\0\4\51\1\u0192\24\51\10\0"+
    "\3\51\1\0\2\51\5\0\10\51\1\u0193\20\51\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\4\7\1\u0194"+
    "\24\7\10\0\3\51\1\0\2\51\5\0\10\51\1\u0195"+
    "\20\51\10\0\3\51\1\0\2\51\5\0\10\51\1\u0196"+
    "\20\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\11\7\1\u0197\17\7\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\1\7\1\u0198\27\7\10\0\1\51\1\7"+
    "\1\u0199\1\10\2\7\5\0\31\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\1\u019a\30\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\2\7\1\u019b\26\7"+
    "\10\0\1\51\1\7\1\u019c\1\10\2\7\5\0\31\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\1\7"+
    "\1\u019d\27\7\10\0\3\51\1\0\2\51\5\0\12\51"+
    "\1\u019e\16\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\6\7\1\u019f\22\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\u01a0\27\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\13\7\1\u01a1\15\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\13\7"+
    "\1\u01a2\15\7\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\16\7\1\u01a3\12\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\u01a4\27\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\5\7\1\u01a5\23\7"+
    "\15\0\1\u01a6\46\0\3\51\1\0\2\51\5\0\13\51"+
    "\1\u01a7\15\51\10\0\3\51\1\0\2\51\5\0\23\51"+
    "\1\u01a8\5\51\10\0\3\51\1\0\2\51\5\0\15\51"+
    "\1\u01a9\13\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\5\7\1\u01aa\23\7\10\0\1\51\1\7\1\u01ab"+
    "\1\10\2\7\5\0\31\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\1\7\1\u01ac\27\7\10\0\1\51"+
    "\1\7\1\u01ad\1\10\2\7\5\0\31\7\10\0\3\51"+
    "\1\0\2\51\5\0\17\51\1\u01ae\11\51\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u01af\27\7"+
    "\10\0\3\51\1\0\2\51\5\0\16\51\1\u01b0\12\51"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\13\7"+
    "\1\u01b1\15\7\10\0\3\51\1\0\2\51\5\0\15\51"+
    "\1\u01b2\13\51\10\0\3\51\1\0\2\51\5\0\1\51"+
    "\1\u01b3\27\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\6\7\1\u01b4\22\7\10\0\3\51\1\0\2\51"+
    "\5\0\1\51\1\u01b5\27\51\10\0\3\51\1\0\2\51"+
    "\5\0\1\51\1\u01b6\27\51\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\22\7\1\u01b7\6\7\10\0\3\51"+
    "\1\0\2\51\5\0\13\51\1\u01b8\15\51\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u01b9\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\13\7"+
    "\1\u01ba\15\7\10\0\3\51\1\0\2\51\5\0\14\51"+
    "\1\u01bb\14\51\10\0\3\51\1\0\2\51\5\0\4\51"+
    "\1\u01bc\24\51\10\0\1\51\1\7\1\51\1\10\2\7"+
    "\5\0\4\7\1\u01bd\24\7\10\0\1\51\1\7\1\51"+
    "\1\10\2\7\5\0\17\7\1\u01be\11\7\10\0\1\51"+
    "\1\7\1\51\1\10\2\7\5\0\1\7\1\u01bf\27\7"+
    "\10\0\1\51\1\7\1\51\1\10\2\7\5\0\5\7"+
    "\1\u01c0\23\7\10\0\2\51\1\u01c1\1\0\2\51\5\0"+
    "\31\51\10\0\3\51\1\0\2\51\5\0\15\51\1\u01c2"+
    "\13\51\10\0\3\51\1\0\2\51\5\0\22\51\1\u01c3"+
    "\6\51\10\0\3\51\1\0\2\51\5\0\22\51\1\u01c4"+
    "\6\51\10\0\3\51\1\0\2\51\5\0\5\51\1\u01c5"+
    "\23\51\10\0\3\51\1\0\2\51\5\0\4\51\1\u01c6"+
    "\24\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\17\7\1\u01c7\11\7\10\0\3\51\1\0\2\51\5\0"+
    "\17\51\1\u01c8\11\51\10\0\3\51\1\0\2\51\5\0"+
    "\5\51\1\u01c9\23\51\10\0\3\51\1\0\2\51\5\0"+
    "\5\51\1\u01ca\23\51\10\0\3\51\1\0\2\51\5\0"+
    "\5\51\1\u01cb\23\51\10\0\3\51\1\0\2\51\5\0"+
    "\16\51\1\u01cc\12\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\17\7\1\u01cd\11\7\10\0\3\51\1\0"+
    "\2\51\5\0\6\51\1\u01ce\22\51\10\0\3\51\1\0"+
    "\2\51\5\0\1\51\1\u01cf\27\51\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\16\7\1\u01d0\12\7\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\22\7\1\u01d1"+
    "\6\7\10\0\3\51\1\0\2\51\5\0\13\51\1\u01d2"+
    "\15\51\10\0\3\51\1\0\2\51\5\0\2\51\1\u01d3"+
    "\26\51\10\0\3\51\1\0\2\51\5\0\17\51\1\u01d4"+
    "\11\51\10\0\3\51\1\0\2\51\5\0\2\51\1\u01d5"+
    "\26\51\10\0\3\51\1\0\2\51\5\0\15\51\1\u01d6"+
    "\13\51\10\0\3\51\1\0\2\51\5\0\13\51\1\u01d7"+
    "\15\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\16\7\1\u01d8\12\7\10\0\3\51\1\0\2\51\5\0"+
    "\16\51\1\u01d9\12\51\10\0\3\51\1\0\2\51\5\0"+
    "\13\51\1\u01da\15\51\10\0\3\51\1\0\2\51\5\0"+
    "\13\51\1\u01db\15\51\10\0\3\51\1\0\2\51\5\0"+
    "\13\51\1\u01dc\15\51\10\0\1\51\1\7\1\51\1\10"+
    "\2\7\5\0\16\7\1\u01dd\12\7\10\0\1\51\1\7"+
    "\1\51\1\10\2\7\5\0\5\7\1\u01de\23\7\10\0"+
    "\3\51\1\0\2\51\5\0\2\51\1\u01df\26\51\10\0"+
    "\3\51\1\0\2\51\5\0\11\51\1\u01e0\17\51\10\0"+
    "\3\51\1\0\2\51\5\0\11\51\1\u01e1\17\51\10\0"+
    "\3\51\1\0\2\51\5\0\13\51\1\u01e2\15\51\10\0"+
    "\3\51\1\0\2\51\5\0\13\51\1\u01e3\15\51\10\0"+
    "\3\51\1\0\2\51\5\0\1\51\1\u01e4\27\51\10\0"+
    "\1\51\1\7\1\51\1\10\2\7\5\0\5\7\1\u01e5"+
    "\23\7\10\0\3\51\1\0\2\51\5\0\5\51\1\u01e6"+
    "\23\51\10\0\3\51\1\0\2\51\5\0\15\51\1\u01e7"+
    "\13\51\10\0\3\51\1\0\2\51\5\0\15\51\1\u01e8"+
    "\13\51\10\0\1\51\1\7\1\51\1\10\2\7\5\0"+
    "\5\7\1\u01e9\23\7\10\0\3\51\1\0\2\51\5\0"+
    "\11\51\1\u01ea\17\51\10\0\3\51\1\0\2\51\5\0"+
    "\1\51\1\u01eb\27\51\10\0\3\51\1\0\2\51\5\0"+
    "\17\51\1\u01ec\11\51\10\0\3\51\1\0\2\51\5\0"+
    "\1\51\1\u01ed\27\51\10\0\3\51\1\0\2\51\5\0"+
    "\2\51\1\u01ee\26\51\10\0\3\51\1\0\2\51\5\0"+
    "\22\51\1\u01ef\6\51\10\0\3\51\1\0\2\51\5\0"+
    "\13\51\1\u01f0\15\51\10\0\3\51\1\0\2\51\5\0"+
    "\5\51\1\u01f1\23\51\10\0\3\51\1\0\2\51\5\0"+
    "\15\51\1\u01f2\13\51\10\0\3\51\1\0\2\51\5\0"+
    "\20\51\1\u01f3\10\51\10\0\3\51\1\0\2\51\5\0"+
    "\1\51\1\u01f4\27\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\5\11\27\1\2\11\67\1\1\0"+
    "\101\1\1\11\104\1\1\0\72\1\1\0\66\1\2\0"+
    "\114\1\1\11\116\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 96: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 3: 
            { return YANG_SLASH;
            } 
            // fall through
          case 98: break;
          case 4: 
            { return YANG_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 99: break;
          case 5: 
            { return YANG_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 100: break;
          case 6: 
            { return YANG_IDENTIFIER;
            } 
            // fall through
          case 101: break;
          case 7: 
            { return YANG_UNQUOTED_STRING;
            } 
            // fall through
          case 102: break;
          case 8: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 103: break;
          case 9: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 104: break;
          case 10: 
            { return YANG_COLON;
            } 
            // fall through
          case 105: break;
          case 11: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 106: break;
          case 12: 
            { return YANG_PLUS;
            } 
            // fall through
          case 107: break;
          case 13: 
            { return YANG_LINE_COMMENT;
            } 
            // fall through
          case 108: break;
          case 14: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 109: break;
          case 15: 
            { return YANG_ADD_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 16: 
            { return YANG_RPC_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 17: 
            { return YANG_MAX_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 18: 
            { return YANG_MIN_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 19: 
            { return YANG_BIT_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 20: 
            { return YANG_KEY_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 21: 
            { return YANG_LEAF_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 22: 
            { return YANG_LIST_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 23: 
            { return YANG_ENUM_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 24: 
            { return YANG_MUST_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 25: 
            { return YANG_USER_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 26: 
            { return YANG_USES_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 27: 
            { return YANG_TRUE_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 28: 
            { return YANG_TYPE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 29: 
            { return YANG_BASE_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 30: 
            { return YANG_CASE_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 31: 
            { return YANG_PATH_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 32: 
            { return YANG_WHEN_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 33: 
            { return YANG_FALSE_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 34: 
            { return YANG_RANGE_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 35: 
            { return YANG_UNITS_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 36: 
            { return YANG_INPUT_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 37: 
            { return YANG_VALUE_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 38: 
            { return YANG_LENGTH_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 39: 
            { return YANG_ANYXML_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 40: 
            { return YANG_REFINE_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 41: 
            { return YANG_MODULE_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 42: 
            { return YANG_UNIQUE_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 43: 
            { return YANG_SYSTEM_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 44: 
            { return YANG_STATUS_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 45: 
            { return YANG_OUTPUT_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 46: 
            { return YANG_IMPORT_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 47: 
            { return YANG_CONFIG_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 48: 
            { return YANG_CHOICE_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 49: 
            { return YANG_DELETE_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 50: 
            { return YANG_PREFIX_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 51: 
            { return YANG_LEAFREF_TYPE;
            } 
            // fall through
          case 146: break;
          case 52: 
            { return YANG_AUGMENT_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 53: 
            { return YANG_FEATURE_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 54: 
            { return YANG_REPLACE_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 55: 
            { return YANG_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 56: 
            { return YANG_INCLUDE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 57: 
            { return YANG_CURRENT_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 58: 
            { return YANG_CONTACT_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 59: 
            { return YANG_DEFAULT_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 60: 
            { return YANG_DEVIATE_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 61: 
            { return YANG_PATTERN_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 62: 
            { return YANG_DATE_ARG;
            } 
            // fall through
          case 157: break;
          case 63: 
            { return YANG_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 64: 
            { return YANG_REVISION_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 65: 
            { return YANG_GROUPING_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 66: 
            { return YANG_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 67: 
            { return YANG_IDENTITY_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 68: 
            { return YANG_PRESENCE_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 69: 
            { return YANG_POSITION_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 70: 
            { return YANG_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 71: 
            { return YANG_EXTENSION_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 72: 
            { return YANG_REFERENCE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 73: 
            { return YANG_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 74: 
            { return YANG_MANDATORY_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 75: 
            { return YANG_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 76: 
            { return YANG_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 77: 
            { return YANG_CONTAINER_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 78: 
            { return YANG_DEVIATION_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 79: 
            { return YANG_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 80: 
            { return YANG_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 81: 
            { return YANG_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 82: 
            { return YANG_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 83: 
            { return YANG_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 84: 
            { return YANG_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 85: 
            { return YANG_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 86: 
            { return YANG_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 87: 
            { return YANG_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 88: 
            { return YANG_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 89: 
            { return YANG_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 90: 
            { return YANG_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 91: 
            { return YANG_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 92: 
            { return YANG_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 93: 
            { return YANG_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 94: 
            { return YANG_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 95: 
            { return YANG_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
